<rss xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html" version="2.0">
  <channel>
    <title>
      <![CDATA[ freeCodeCamp.org - Medium ]]>
    </title>
    <description>
      <![CDATA[
Stories worth reading about programming and technology from our open source community. - Medium
]]>
    </description>
    <link>
https://medium.freecodecamp.org?source=rss----336d898217ee---4
    </link>
    <image>
      <url>
https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png
      </url>
      <title>freeCodeCamp.org - Medium</title>
      <link>
https://medium.freecodecamp.org?source=rss----336d898217ee---4
      </link>
    </image>
    <generator>Medium</generator>
    <lastBuildDate>Thu, 07 Feb 2019 07:43:08 GMT</lastBuildDate>
    <atom:link href="https://medium.freecodecamp.org/feed" rel="self" type="application/rss+xml"/>
    <webMaster>
      <![CDATA[ yourfriends@medium.com ]]>
    </webMaster>
    <atom:link href="http://medium.superfeedr.com" rel="hub"/>
    <item>
      <title>
        <![CDATA[
How to set up continuous deployment in your home project the easy way
]]>
      </title>
      <link>
https://medium.freecodecamp.org/how-to-set-up-continuous-deployment-in-your-home-project-the-easy-way-41b84a467eed?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/41b84a467eed</guid>
      <category>
        <![CDATA[ programming ]]>
      </category>
      <category>
        <![CDATA[ continuous-deployment ]]>
      </category>
      <category>
        <![CDATA[ tech ]]>
      </category>
      <category>
        <![CDATA[ docker ]]>
      </category>
      <category>
        <![CDATA[ productivity ]]>
      </category>
      <dc:creator>
        <![CDATA[ Julius ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 22:49:13 GMT</pubDate>
      <atom:updated>2019-02-06T22:49:13.155Z</atom:updated>
      <content:encoded>
        <![CDATA[
<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*pnP8tnza1D2UAqBJXsnpug.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/photos/KNfu_j6KSJI?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Sarah Phillips</a></figcaption></figure><p>Continuous
]]>
        <![CDATA[
Deployment is a beautiful thing. Committing your project and seeing it being built and deployed without having to do anything is mesmerizing.</p><p>And in this article, I want to show you how to get it done in your home project with ease.</p><p>To clear it up, here is a flowchart showing the differences between Continuous Delivery and Continuous Deployment.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2xW4u4CbFi6y78brxz6HrA.png" /><figcaption>Continuous Delivery vs. Continuous Deployment</figcaption></figure><p>Since most of the time no one but you depends on your home project, we’re going for a workflow with Continuous Deployment since you want to see your changes immediately deployed. If that’s not the case, you can change the workflow later.</p><p>You will learn about the following:</p><ul><li>How to make a Dockerfile</li><li>How to push your project to GitHub</li><li>Automatically building the docker image on Docker Hub</li><li>Automatically downloading and running the image with <a href="https://github.com/v2tec/watchtower">Watchtower</a></li></ul><p>Prerequisites:</p><ul><li>Some knowledge about Docker and the Dockerfile, though I will explain some of it along the way</li><li>Have <a href="https://git-scm.com/">git</a> installed</li><li>A <a href="https://hub.docker.com/">Docker Hub</a> account</li><li>A (Linux) server (either physical or virtual) running Docker</li></ul><p>For reference, <a href="https://github.com/juligreen/easy_CD_tutorial">this</a> is the example GitHub repository, and <a href="https://hub.docker.com/r/juligreen/easy_cd_tutorial">this</a> is the example docker hub repository that I’ll be using.</p><p>Thus this tutorial will only be useful if you intend to run your software with Docker (which I recommend as Docker is fantastic).</p><h4>Why use Docker?</h4><p>Docker enables you to have the same environment for development and production which eliminates <a href="https://en.wikipedia.org/wiki/Heisenbug">Heisenbugs</a> and the “it works on my machine” problem. Also, containers are isolated which gives us security benefits.<br>There’s more to it, but these two benefits make me always deliver my software in Docker containers.</p><h4>Setting up your Dockerfile</h4><p>First, we will make a Dockerfile for the project. This special file is always called “Dockerfile” without an extension and sits at the top directory of your project.</p><p>A Dockerfile starts with the FROM statement which tells Docker which base image you want to start with. You can imagine this as using a canvas with the background already drawn and only the central part (your program) missing.<br>Most of the time the image you want to pull is the base image of your programming language, which you can find at the before mentioned <a href="https://hub.docker.com/">Docker Hub</a>.</p><p>Next, we copy our project files into the docker container with the COPY.. command. What does this do?</p><p>It takes the files from the first directory (the dot refers to the current directory of the file, which includes all your project files) and puts it in the current directory of your Docker container (remember your docker container is its own OS). Your files are now at the base directory there, which you may want to change.</p><p>Next, we need to install dependencies, which I will use python pip for, but any equivalent package management system depending on your language of choice will do. The critical thing to learn here is how to execute commands in the container with RUN.</p><pre>From python:3.7<br>COPY . .<br>RUN pip install <strong>-</strong>r requirements.txt</pre><p>Easy, isn’t it? Now we have to start our program in the container.</p><pre>CMD <strong>[</strong>&quot;python&quot;, &quot;./my_script.py&quot;<strong>]</strong></pre><p>The CMD statement is unique. Every Dockerfile has to have it as its last line because it starts the primary process in the container.</p><p>You have finished your Dockerfile! You can now manually build your image and container, but we’re going to skip that for now.</p><p>Now, we’ll create our repository on GitHub, but remember to leave “Initialize this repository with a README” unticked.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*LzPN-IbS_BJR4dBhtWhY6A.png" /></figure><p>Then you’d need to copy the remote URL.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Rssu6BgV4N3IO6G8PuMnLQ.png" /></figure><p>Open a cmd/shell in the root directory of your project.</p><p>You need to initialize your git repository, add your files, configure the remote, commit the files and push your project to GitHub.</p><pre>git init<br>git add *<br>git remote add origin https://github.com/&lt;user&gt;/&lt;repository&gt;.git<br>git commit -a -m &quot;Make Dockerfile ready for CD&quot;<br>git push -u origin master</pre><p>Now, your GitHub Repository should look like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1014/1*kN1wMLkk50Fqov8QsJYfYg.png" /></figure><p>Congratulations, you’re about halfway done!</p><p>The next step is to connect GitHub to Docker Hub. For this, you go to the account settings.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*5FHD8Rw-5lg0kjhIInYsPA.png" /></figure><p>Scroll down and connect your git host.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/932/1*yprXlD5SsqvjqWaLi5pUEg.png" /></figure><p>Create your repository on docker hub now.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xK4Oqu-oG90q8kxH7NdhjQ.png" /></figure><p>Give the repo a name and click the GitHub icon (or Bitbucket, if that’s your thing). Now choose your organization (usually your username) and your project’s name. If you want to use your master image for the build and always push to latest, you can now click “Create &amp; Build” and watch your image being built for you. Otherwise, you have to edit the build settings.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/698/1*Qup2ja2IsbkC2TvrCesS-Q.png" /></figure><p>Last steps! Now you need <a href="https://github.com/v2tec/watchtower">Watchtower</a> on your target machine.<br>Watchtower is a program that pulls your running docker images and checks for updates. If there are any updates, it gracefully shuts down the original container and creates a container from the new image with the same settings.</p><p>The best thing is that we can also install Watchtower with Docker!</p><p>Enter the following into your terminal:</p><pre>docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock v2tec/watchtower</pre><p>Then you need to run the docker container for your project!</p><pre>docker run -d --name &lt;my-project&gt; &lt;username&gt;/&lt;my-project&gt;</pre><p>The “-d” option makes your program run in the background, so the program doesn’t shut down if you close the terminal.</p><p>So to summarize, if you push a commit to your GitHub repository, Docker hub will automatically build a Docker image for you. This image then gets pulled by WatchTower and is run with all original options.</p><p>If you need help at any point don’t be afraid to ask, I’m happy to help.</p><h4>But what about tests?</h4><p>Good question!<br>You can use Travis CI to run your tests at the same time.<br>You can read about this <a href="https://docs.travis-ci.com/user/tutorial/">here</a>, but the gist of it is, that you add another file to your repository which has instructions for an external server to execute unit tests or any other instructions.</p><blockquote>But what if I only want my docker image to build if the tests pass?</blockquote><p>This breaks our workflow a bit.<br>We now can’t rely on docker hub to build our images anymore. Instead, it’s also going to be Travis CI that produces the image and then pushes it to your Docker Hub repository. Read about this <a href="https://docs.travis-ci.com/user/docker/">here</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=41b84a467eed" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-set-up-continuous-deployment-in-your-home-project-the-easy-way-41b84a467eed">How to set up continuous deployment in your home project the easy way</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
Cache Deception: How I discovered a vulnerability in Medium and helped them fix it
]]>
      </title>
      <link>
https://medium.freecodecamp.org/cache-deception-how-i-discovered-a-vulnerability-in-medium-and-helped-them-fix-it-31cec2a3938b?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/31cec2a3938b</guid>
      <category>
        <![CDATA[ web-development ]]>
      </category>
      <category>
        <![CDATA[ technology ]]>
      </category>
      <category>
        <![CDATA[ software-development ]]>
      </category>
      <category>
        <![CDATA[ bug-bounty ]]>
      </category>
      <category>
        <![CDATA[ cybersecurity ]]>
      </category>
      <dc:creator>
        <![CDATA[ Yuval Shprinz ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 20:10:38 GMT</pubDate>
      <atom:updated>2019-02-06T20:10:38.857Z</atom:updated>
      <content:encoded>
        <![CDATA[
<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*knSTn0jDiWavvtq7gUvmeg.png" /><figcaption>I drew that masterpiece myself</figcaption></figure><p>In my <a href="https://hackernoon.com/dont-publish-yet-reverse-engineering-the-medium-app-and-making-all-stories-in-it-free-48c8f2695687">previous post</a>, I tried to demonstrate how powerful and cool reverse engineering Android apps can be. I did this by showing how to modify Medium’s app so all membership-required stories in it would be available for free.</p><p>Well, there was a bit more to the story :)</p><p>While working towards my desired goal, I found a large collection of API endpoints that Medium declared in their code, which exposed a neat Cache Deception vulnerability after a short iteration on them. I was especially excited about that find because cache-based attacks are exceptionally awesome, and it could have been a great addition to my story.</p><p>Unfortunately, it took Medium three months and a couple of reminders to respond, so I had to wait with the public disclosure for a bit.</p><p>In this post, I will try to explain intuitively what Cache Deception is, describe the bug at Medium, and reference two outstanding articles about cache-based attacks.</p><h3>Cache Deception</h3><p>Web browsers cache servers’ static responses so they won’t need to request them again — saving both time and bandwidth.</p><p>In a similar principle, servers and CDNs (Content delivery networks, Cloudflare for example) cache responses too (their own responses), so they won’t need to waste time processing them again. Instead of passing to the server a request that the CDN already knows its response to (i.e. a static image), it can return a response immediately to the client and reduce both server load and response time.</p><p>When servers cache static responses, everyone benefits from it. But what happens when a server caches a non-static response that contains some sensitive information? The server will start serving the cached response to everyone from now on, hence making any sensitive information in it public!</p><p>So that’s basically what Cache Deception is — making servers cache sensitive data, by exploiting badly configured caching rules. After the sensitive data is cached, an attacker can come back to hoard it, for example.</p><h3>Caching User Profiles</h3><p>Medium uses the library Retrofit to turn their HTTP APIs into Java interfaces for their Android app, so basically every endpoint lies nicely in their code with all of its available parameters specified. I extracted all of them to a list that ended up being about 900 endpoints.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*mSUEjy_HOhtxyLLB-z_jKQ.png" /><figcaption>Some extracted endpoints</figcaption></figure><p>That list was a real treasure, so I couldn’t stop myself from spending some time iterating it. Among other things, I looked for URLs that ended with user controlled input, because there is a common miss-configuration of caching services to cache every resource path that looks like a file. Remember, our goal is to find endpoints that both contain sensitive information and are cached by Medium’s servers. So, finding an API endpoint that’s being cached would be great.</p><p>As it turned out, Medium indeed cached paths that looked like files by default, but only for resources that were right under the root directory of the site, URLs like https://medium.com/niceImage.png.</p><p>Fortunately, my beautiful list contained one endpoint that held the above requirements — <strong>user profile pages</strong>. By setting my username to “yuval.png”, my profile page URL became https://medium.com/@yuval.png, and when someone visited it, its response was cached there for a while (4 hours, then the server dropped it). And that was actually the whole bug, setting usernames to end with a file extension -in order to cause profile pages to be cached.</p><p>What sensitive information can be extracted from cached responses of visits to my profile page?</p><ul><li>CSRF tokens. Those are embedded in the returned document. (<a href="https://stackoverflow.com/a/33829607">Cross-Site Request Forgery in simple words</a>)</li><li>Information about who viewed my profile. The currently logged in user can also be extracted from returned documents.</li></ul><p>The fact that each cached response was there for 4 hours and blocked other responses from being cached wasn’t a problem, because by using a simple script usernames can be changed repeatedly (and generate new URLs that aren’t cached yet).</p><p>Note that this bug could have also been used by users that were willing to hide the “block user” option on their own profile page, if they repeatedly entered it (again, using a script). This would work because users don’t have the option to block themselves on their own profile and so others wouldn’t have it either when they receive a cached response that was created for the account owner.</p><h3>Report Timeline</h3><p>I sent Medium my report through their bug bounty program, and here’s the timeline:</p><p>Aug 24 — Sent my initial report, and received an automatic email which said that Medium would try to get back to me within 48 hours.</p><p>Sep 14 — Checked with them if something wasn’t clear since they hadn’t responded yet.</p><p>Nov 1 — Issued another message, saying was fine with me if my report got rejected, and asking for a response so I would know they received it.</p><p>Nov 20 — Response from Medium! apologizing for the delay and rewarding my bug with $100 and a shirt.</p><p>I guess it took them a while because Cache Deception isn’t the usual kind of bug people report — but I was just hoping for a quick response asking me for more explanation or something. I assumed no one was reading their inbox.</p><p>P.S. the bug was rewarded only $100 because Medium’s program is small, not because it’s lame :P</p><h3>Cache Based Attacks — Further Readings</h3><p>Cache-based attacks have been known for a long time, but were considered mostly theoretical until the recent publish of two outstanding works by Omer Gil and James Kettle. If you find the subject interesting, don’t miss these:</p><h4><a href="http://omergil.blogspot.com/2017/02/web-cache-deception-attack.html">Web Cache Deception Attack</a> — Omer Gil, Feb 2017</h4><p>While demonstrating it on PayPal, Omer claims the term Cache Deception for this new and amazing attack vector.</p><h4><a href="https://portswigger.net/blog/practical-web-cache-poisoning">Practical Web Cache Poisoning</a> — James Kettle, Aug 2018</h4><p>Cache Poisoning has been known for years, but by publishing his extensive research James made it practical. Check out his follow up article on the subject “<a href="https://portswigger.net/blog/bypassing-web-cache-poisoning-countermeasures">Bypassing Web Cache Poisoning Countermeasures</a>” too.</p><p>See you next time…<br>👈😎👉</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=31cec2a3938b" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/cache-deception-how-i-discovered-a-vulnerability-in-medium-and-helped-them-fix-it-31cec2a3938b">Cache Deception: How I discovered a vulnerability in Medium and helped them fix it</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
How to build a simple game in the browser with Phaser 3 and TypeScript
]]>
      </title>
      <link>
https://medium.freecodecamp.org/how-to-build-a-simple-game-in-the-browser-with-phaser-3-and-typescript-bdc94719135?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/bdc94719135</guid>
      <category>
        <![CDATA[ front-end-development ]]>
      </category>
      <category>
        <![CDATA[ programming ]]>
      </category>
      <category>
        <![CDATA[ game-development ]]>
      </category>
      <category>
        <![CDATA[ typescript ]]>
      </category>
      <category>
        <![CDATA[ tech ]]>
      </category>
      <dc:creator>
        <![CDATA[ Mariya Davydova ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 20:01:15 GMT</pubDate>
      <atom:updated>2019-02-06T20:01:15.658Z</atom:updated>
      <content:encoded>
        <![CDATA[
<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*m16cMnrn60vR49N8Sj1liA.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/photos/a0TJ3hy-UD8?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Phil Botha</a> on <a href="https://unsplash.com/collec
]]>
        <![CDATA[ tions/3995048/stars/e08862541511fcb17f0de3d4a555bff8?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>I’m a developer advocate and a backend developer, and my frontend development expertise is relatively weak. A while ago I wanted to
]]>
        <![CDATA[
have some fun and make a game in a browser; I chose Phaser 3 as a framework (it looks quite popular these days) and TypeScript as a language (because I prefer static typing over dynamic). It turned out that you need to do some boring stuff to make it all work, so I wrote this tutorial to help the other people like me get started faster.</p><h3>Preparing the environment</h3><h4>IDE</h4><p>Choose your development environment. You can always use plain old Notepad if you wish, but I would suggest using something more helpful. As for me, I prefer developing pet projects in Emacs, therefore I have installed <a href="https://github.com/ananthakumaran/tide">tide</a> and followed the instructions to set it up.</p><h4>Node</h4><p>If we were developing on JavaScript, we would be perfectly fine to start coding without all these preparation steps. However, as we want to use TypeScript, we have to set up the infrastructure to make the future development as fast as possible. Thus we need to install node and npm.</p><p>As I write this tutorial, I use <a href="https://nodejs.org/en/">node 10.13.0</a> and <a href="https://www.npmjs.com/">npm 6.4.1</a>. Please note that the versions in the frontend world update extremely fast, so you simply take the latest stable versions. I strongly recommend using <a href="https://github.com/creationix/nvm">nvm</a> instead of installing node and npm manually; it will save you a lot of time and nerves.</p><h3>Setting up the project</h3><h4>Project structure</h4><p>We will use npm for building the project, so to start the project go to an empty folder and run npm init. npm will ask you several questions about your project properties and then create a package.json file. It will look something like this:</p><pre>{<br> &quot;name&quot;: &quot;Starfall&quot;,<br> &quot;version&quot;: &quot;0.1.0&quot;,<br> &quot;description&quot;: &quot;Starfall game (Phaser 3 + TypeScript)&quot;,<br> &quot;main&quot;: &quot;index.js&quot;,<br> &quot;scripts&quot;: {<br> &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;<br> },<br> &quot;author&quot;: &quot;Mariya Davydova&quot;,<br> &quot;license&quot;: &quot;MIT&quot;<br>}</pre><h4>Packages</h4><p>Install the packages we need with the following command:</p><p>npm install -D typescript webpack webpack-cli ts-loader phaser live-server</p><p>-D option (a.k.a. --save-dev) makes npm add these packages to the list of dependencies in package.json automatically:</p><pre>&quot;devDependencies&quot;: {<br> &quot;live-server&quot;: &quot;^1.2.1&quot;,<br> &quot;phaser&quot;: &quot;^3.15.1&quot;,<br> &quot;ts-loader&quot;: &quot;^5.3.0&quot;,<br> &quot;typescript&quot;: &quot;^3.1.6&quot;,<br> &quot;webpack&quot;: &quot;^4.26.0&quot;,<br> &quot;webpack-cli&quot;: &quot;^3.1.2&quot;<br> }</pre><h4>Webpack</h4><p>Webpack will run the TypeScript compiler and collect the bunch of resulting JS files as well as libraries into one minified JS so that we can include it in our page.</p><p>Add webpack.config.js near your project.json:</p><pre>const path = require(&#39;path&#39;);</pre><pre>module.exports = {<br> entry: &#39;./src/app.ts&#39;,<br> module: {<br> rules: [<br> {<br> test: /\.tsx?$/,<br> use: &#39;ts-loader&#39;,<br> exclude: /node_modules/<br> }<br> ]<br> },<br> resolve: {<br> extensions: [ &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.js&#39; ]<br> },<br> output: {<br> filename: &#39;app.js&#39;,<br> path: path.resolve(__dirname, &#39;dist&#39;)<br> },<br> mode: &#39;development&#39;<br>};</pre><p>Here we see that webpack has to get the sources starting from src/app.ts(which we’ll add very soon) and collect everything in dist/app.js file.</p><h4>TypeScript</h4><p>We also need a small configuration file for the TypeScript compiler (tsconfig.json) where we explain which JS version we want the sources to be compiled to and where to find those sources:</p><pre>{<br> &quot;compilerOptions&quot;: {<br> &quot;target&quot;: &quot;es5&quot;<br> },<br> &quot;include&quot;: [<br> &quot;src/*&quot;<br> ]<br>}</pre><h4>TypeScript definitions</h4><p>TypeScript is a statically typed language. Therefore, it requires type definitions for the compilation. At the time of writing this tutorial, the definitions for Phaser 3 were not yet available as the npm package, so you may need to <a href="https://github.com/photonstorm/phaser3-docs/blob/master/typescript/phaser.d.ts">download them</a> from the official repository and put the file in the src subdirectory of your project.</p><h4>Scripts</h4><p>We have almost finished the project set up. At this moment you should have created package.json, webpack.config.js, and tsconfig.json, and added src/phaser.d.ts. The last thing we need to do before starting to write code is to explain what exactly npm has to do with the project. We update the scripts section of the package.json as follows:</p><pre>&quot;scripts&quot;: {<br><strong> &quot;build&quot;: &quot;webpack&quot;,<br> &quot;start&quot;: &quot;webpack --watch &amp; live-server --port=8085&quot;<br></strong>}</pre><p>When you execute npm build, the app.js file will be built according to the webpack configuration. And when you run npm start, you won’t have to bother about the build process: as soon as you save any source, webpack will rebuild the app and the <a href="https://www.npmjs.com/package/live-server">live-server</a> will reload it in your default browser. The app will be hosted at <a href="http://127.0.0.1:8085/">http://127.0.0.1:8085/</a>.</p><h3>Getting started</h3><p>Now that we have set up the infrastructure (the part I personally hate when starting a project), we can finally start coding. In this step we’ll do a straightforward thing: draw a dark blue rectangle in our browser window. Using a big game development framework for this is a little bit of… hmmm… overkill. Still, we’ll need it on next steps.</p><p>Let me briefly explain the main concepts of Phaser 3. The game is an instance of the Phaser.Game class (or its descendant). Each game contains one or more instances of Phaser.Scene descendants. Each scene contains several objects, either static or dynamic, and represents a logical part of the game. For example, our trivial game will have three scenes: the welcome screen, the game itself, and the score screen.</p><p>Let’s start coding.</p><p>First, create a minimalistic HTML container for the game. Make an index.html file, which contains the following code:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br> &lt;title&gt;Starfall&lt;/title&gt;<br> &lt;script src=&quot;dist/app.js&quot;&gt;&lt;/script&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br> &lt;div id=&quot;game&quot;&gt;&lt;/div&gt;<br> &lt;/body&gt;<br>&lt;/html&gt;</pre><p>There are only two essential parts here: the first one is a script entry which says that we are going to use our built file here, and the second one is a div entry which will be the game container.</p><p>Now create a file src/app.ts with the following code:</p><pre>import &quot;phaser&quot;;</pre><pre>const config: GameConfig = {<br> title: &quot;Starfall&quot;,<br> width: 800,<br> height: 600,<br> parent: &quot;game&quot;<br> backgroundColor: &quot;#18216D&quot;<br>};</pre><pre>export class StarfallGame extends Phaser.Game {<br> constructor(config: GameConfig) {<br> super(config);<br> }<br>}</pre><pre>window.onload = () =&gt; {<br> var game = new StarfallGame(config);<br>};</pre><p>This code is self-explanatory. GameConfig has a lot of various properties, you can check them out <a href="https://photonstorm.github.io/phaser3-docs/global.html#GameConfig">here</a> .</p><p>And now you can finally run npm start. If everything was done correctly on this and previous steps, you should see something as simple as this in your browser:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*1ecSa8Bs5zX6TQRq60qr6w.png" /><figcaption>Yes, this is a blue screen.</figcaption></figure><h3>Making the stars fall</h3><p>We have created an elementary application. Now it’s time to add a scene where something will happen. Our game will be simple: the stars will fall to the ground, and the goal will be to catch as many as possible.</p><p>To achieve this goal create a new file, gameScene.ts, and add the following code:</p><pre>import &quot;phaser&quot;;</pre><pre>export class GameScene extends Phaser.Scene {</pre><pre>constructor() {<br> super({<br> key: &quot;GameScene&quot;<br> });<br> }</pre><pre>init(params): void {<br> // TODO<br> }</pre><pre>preload(): void {<br> // TODO<br> }<br><br> create(): void {<br> // TODO<br> }</pre><pre>update(time): void {<br> // TODO<br> }<br>};</pre><p>Constructor here contains a key under which other scenes may call this scene.</p><p>You see here stubs for four methods. Let me briefly explain the difference between then:</p><ul><li>init([params]) is called when the scene starts; this function may accept parameters, which are passed from other scenes or game by calling scene.start(key, [params])</li><li>preload() is called before the scene objects are created, and it contains loading assets; these assets are cached, so when the scene is restarted, they are not reloaded</li><li>create() is called when the assets are loaded and usually contains creation of the main game objects (background, player, obstacles, enemies, etc.)</li><li>update([time]) is called every tick and contains the dynamic part of the scene — everything that moves, flashes, etc.</li></ul><p>To be sure that we don’t forget it later, let’s quickly add the following lines in the game.ts:</p><pre>import &quot;phaser&quot;;<br><strong>import { GameScene } from &quot;./gameScene&quot;;</strong></pre><pre>const config: GameConfig = {<br> title: &quot;Starfall&quot;,<br> width: 800,<br> height: 600,<br> parent: &quot;game&quot;,<br><strong> scene: [GameScene],<br> physics: {<br> default: &quot;arcade&quot;,<br> arcade: {<br> debug: false<br> }<br> },<br></strong> backgroundColor: &quot;#000033&quot;<br>};<br>...</pre><p>Our game now knows about the game scene. If the game config contains a list of scenes then the first one is started when the game is begun, and all others are created but not started until explicitly called.</p><p>We have also added arcade physics here. It is required to make our stars fall.</p><p>Now we can put flesh on the bones of our game scene.</p><p>First, we declare some properties and objects we’re gonna need:</p><pre>export class GameScene extends Phaser.Scene {<br> delta: number;<br> lastStarTime: number;<br> starsCaught: number;<br> starsFallen: number;<br> sand: Phaser.Physics.Arcade.StaticGroup;<br> info: Phaser.GameObjects.Text;<br>...</pre><p>Then, we initialize numbers:</p><pre>init(/*params: any*/): void {<br> this.delta = 1000;<br> this.lastStarTime = 0;<br> this.starsCaught = 0;<br> this.starsFallen = 0;<br> }</pre><p>Now, we load a couple of images:</p><pre>preload(): void {<br> this.load.setBaseURL(<br> &quot;https://raw.githubusercontent.com/mariyadavydova/&quot; +<br> &quot;starfall-phaser3-typescript/master/&quot;);<br> this.load.image(&quot;star&quot;, &quot;assets/star.png&quot;);<br> this.load.image(&quot;sand&quot;, &quot;assets/sand.jpg&quot;);<br> }</pre><p>After that, we can prepare our static components. We will create the ground, where the stars will fall, and the text informing us about the current score:</p><pre>create(): void {<br> this.sand = this.physics.add.staticGroup({<br> key: &#39;sand&#39;,<br> frameQuantity: 20<br> });<br> Phaser.Actions.PlaceOnLine(this.sand.getChildren(),<br> new Phaser.Geom.Line(20, 580, 820, 580));<br> this.sand.refresh();</pre><pre>this.info = this.add.text(10, 10, &#39;&#39;,<br> { font: &#39;24px Arial Bold&#39;, fill: &#39;#FBFBAC&#39; });<br> }</pre><p>A group in Phaser 3 is a way to create a bunch of the objects you want to control together. There two types of objects: static and dynamic. As you may guess, static objects don’t move (ground, walls, various obstacles), while dynamic ones do the job (Mario, ships, missiles).</p><p>We create a static group of the ground pieces. Those pieces are placed along the line. Please note that the line is divided into 20 equal sections (not 19 as you’ve may have expected), and the ground tiles are placed on each section at the left end with the tile center located at that point (I hope this explains those numbers). We also have to call refresh() to update the group bounding box (otherwise, the collisions will be checked against the default location, which is the top left corner of the scene).</p><p>If you check out your application in the browser now, you should see something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*GvOFAilcNMp0FnOTr_QqsA.png" /><figcaption>Blue screen evolution</figcaption></figure><p>We have finally reached the most dynamic part of this scene — update() function, where the stars fall. This function is called somewhere around once in 60 ms. We want to emit a new falling star every second. We won’t use a dynamic group for this, as the lifecycle of each star will be short: it will be destroyed either by user click or by colliding with the ground. Therefore inside the emitStar() function we create a new star and add the processing of two events: onClick() and onCollision().</p><pre>update(time: number): void {<br> var diff: number = time - this.lastStarTime;<br> if (diff &gt; this.delta) {<br> this.lastStarTime = time;<br> if (this.delta &gt; 500) {<br> this.delta -= 20;<br> }<br> this.emitStar();<br> }<br> this.info.text =<br> this.starsCaught + &quot; caught - &quot; +<br> this.starsFallen + &quot; fallen (max 3)&quot;;<br> }</pre><pre>private onClick(star: Phaser.Physics.Arcade.Image): () =&gt; void {<br> return function () {<br> star.setTint(0x00ff00);<br> star.setVelocity(0, 0);<br> this.starsCaught += 1;<br> this.time.delayedCall(100, function (star) {<br> star.destroy();<br> }, [star], this);<br> }<br> }</pre><pre>private onFall(star: Phaser.Physics.Arcade.Image): () =&gt; void {<br> return function () {<br> star.setTint(0xff0000);<br> this.starsFallen += 1;<br> this.time.delayedCall(100, function (star) {<br> star.destroy();<br> }, [star], this);<br> }<br> }</pre><pre>private emitStar(): void {<br> var star: Phaser.Physics.Arcade.Image;<br> var x = Phaser.Math.Between(25, 775);<br> var y = 26;<br> star = this.physics.add.image(x, y, &quot;star&quot;);</pre><pre>star.setDisplaySize(50, 50);<br> star.setVelocity(0, 200);<br> star.setInteractive();</pre><pre>star.on(&#39;pointerdown&#39;, this.onClick(star), this);<br> this.physics.add.collider(star, this.sand, <br> this.onFall(star), null, this);<br> }</pre><p>Finally, we have a game! It doesn’t have a win condition yet. We’ll add it in the last part of our tutorial.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/1*tjX0ikNYl-UFJQnOkQIeOA.png" /><figcaption>I’m bad at catching stars…</figcaption></figure><h3>Wrapping it all up</h3><p>Usually, a game consists of several scenes. Even if the gameplay is simple, you need an opening scene (containing at the very least the ‘Play!’ button) and a closing one (showing the result of your game session, like the score or the maximum level reached). Let’s add these scenes to our application.</p><p>In our case, they will be pretty similar, as I don’t want to pay too much attention to the graphic design of the game. After all, this a programming tutorial.</p><p>The welcome scene will have the following code in welcomeScene.ts. Note that when a user clicks somewhere on this scene, a game scene will appear.</p><pre>import &quot;phaser&quot;;</pre><pre>export class WelcomeScene extends Phaser.Scene {<br> title: Phaser.GameObjects.Text;<br> hint: Phaser.GameObjects.Text;</pre><pre>constructor() {<br> super({<br> key: &quot;WelcomeScene&quot;<br> });<br> }</pre><pre>create(): void {<br> var titleText: string = &quot;Starfall&quot;;<br> this.title = this.add.text(150, 200, titleText,<br> { font: &#39;128px Arial Bold&#39;, fill: &#39;#FBFBAC&#39; });</pre><pre>var hintText: string = &quot;Click to start&quot;;<br> this.hint = this.add.text(300, 350, hintText,<br> { font: &#39;24px Arial Bold&#39;, fill: &#39;#FBFBAC&#39; });</pre><pre>this.input.on(&#39;pointerdown&#39;, function (/*pointer*/) {<br> this.scene.start(&quot;GameScene&quot;);<br> }, this);<br> }<br>};</pre><p>The score scene will look almost the same, leading to the welcome scene on click (scoreScene.ts).</p><pre>import &quot;phaser&quot;;</pre><pre>export class ScoreScene extends Phaser.Scene {<br> score: number;<br> result: Phaser.GameObjects.Text;<br> hint: Phaser.GameObjects.Text;</pre><pre>constructor() {<br> super({<br> key: &quot;ScoreScene&quot;<br> });<br> }</pre><pre>init(params: any): void {<br> this.score = params.starsCaught;<br> }</pre><pre>create(): void {<br> var resultText: string = &#39;Your score is &#39; + this.score + &#39;!&#39;;<br> this.result = this.add.text(200, 250, resultText,<br> { font: &#39;48px Arial Bold&#39;, fill: &#39;#FBFBAC&#39; });</pre><pre>var hintText: string = &quot;Click to restart&quot;;<br> this.hint = this.add.text(300, 350, hintText,<br> { font: &#39;24px Arial Bold&#39;, fill: &#39;#FBFBAC&#39; });</pre><pre>this.input.on(&#39;pointerdown&#39;, function (/*pointer*/) {<br> this.scene.start(&quot;WelcomeScene&quot;);<br> }, this);<br> }<br>};</pre><p>We need to update our main application file now: add these scenes and make the WelcomeScene to be the first in the list:</p><pre>import &quot;phaser&quot;;<br><strong>import { WelcomeScene } from &quot;./welcomeScene&quot;;<br></strong>import { GameScene } from &quot;./gameScene&quot;;<br><strong>import { ScoreScene } from &quot;./scoreScene&quot;;</strong></pre><pre>const config: GameConfig = {<br> ...<br><strong> scene: [WelcomeScene, GameScene, ScoreScene],<br></strong> ...</pre><p>Have you noticed what is missing? Right, we do not call the ScoreScene from anywhere yet! Let’s call it when the player has missed the third star:</p><pre>private onFall(star: Phaser.Physics.Arcade.Image): () =&gt; void {<br> return function () {<br> star.setTint(0xff0000);<br> this.starsFallen += 1;<br> this.time.delayedCall(100, function (star) {<br> star.destroy();<br><strong> if (this.starsFallen &gt; 2) {<br> this.scene.start(&quot;ScoreScene&quot;, <br> { starsCaught: this.starsCaught });<br> }<br></strong> }, [star], this);<br> }<br> }</pre><p>Finally, our Starfall game looks like a real game — it starts, ends, and even has a goal to archive (how many stars can you catch?).</p><p>I hope this tutorial is as useful for you as it was for me when I wrote it :) Any feedback is highly appreciated!</p><p>The source code for this tutorial may be found <a href="https://github.com/mariyadavydova/starfall-phaser3-typescript">here</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bdc94719135" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-build-a-simple-game-in-the-browser-with-phaser-3-and-typescript-bdc94719135">How to build a simple game in the browser with Phaser 3 and TypeScript</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
How to minify images with Gulp & gulp-imagemin and boost your site’s performance
]]>
      </title>
      <link>
https://medium.freecodecamp.org/how-to-minify-images-with-gulp-gulp-imagemin-and-boost-your-sites-performance-6c226046e08e?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/6c226046e08e</guid>
      <category>
        <![CDATA[ programming ]]>
      </category>
      <category>
        <![CDATA[ gulp ]]>
      </category>
      <category>
        <![CDATA[ tech ]]>
      </category>
      <category>
        <![CDATA[ ux ]]>
      </category>
      <category>
        <![CDATA[ productivity ]]>
      </category>
      <dc:creator>
        <![CDATA[ Jonathan Sexton ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 19:47:30 GMT</pubDate>
      <atom:updated>2019-02-06T19:47:30.479Z</atom:updated>
      <content:encoded>
        <![CDATA[
<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*IGn5E-1wp5mQ2DHoevVCFA.png" /><figcaption>The official Gulp logo courtesy of <a href="https://vectors.pro/gulp-logo-vector/">Vectors</a></figcaption></figure><p>Images are everywhere across the internet. You would be hard pressed to find a single page or application that doesn’t contain at least one image in some form or another. Images are great way to help tell stories and emphasize critical parts of our lives.</p><p>But if you’re like me you know that having a large image can seriously impact the performance of your site/app. So today, I’m going to teach you how to use Gulp and an npm package called gulp-imagemin to reduce the size of your images on the fly.</p><p>If you don’t know what all of these words mean, fear not! I have some relevant and important links/descriptions below to help bring you up to speed.</p><ul><li><a href="https://en.wikipedia.org/wiki/Minification_(programming)">Minification</a>, or minifying as I like to call it, is the act or process of removing unnecessary parts of source code to reduce size.</li><li>Gulp is a JavaScript build tool that allows you to automate parts of your workflow to streamline your process. It takes care of some not so interesting, but important, aspects of your workflow (like reducing image size) so that you can focus on the building. You can <a href="https://gulpjs.com/">find Gulp here</a>.</li><li>To make use of npm we&#39;ll need to install Node.js which is, in a nutshell, the framework that allows developers to use JavaScript code in a server (back end) environment. You can <a href="https://nodejs.org/en/download/">find Node here</a>.</li><li>npm (Node Package Manager) is and does what its name implies. It is a package manager for JavaScript and &quot;the world&#39;s largest software registry&quot;. Just think of npm as a giant storage area for awesome packages/utilities to help developers. You can <a href="https://www.npmjs.com/">find npm here</a>.</li><li>gulp-imagemin is one of those awesome packages I mentioned earlier. Using this package we&#39;ll be able to automatically reduce the size of our images every time a save occurs. You can <a href="https://www.npmjs.com/package/gulp-imagemin">find gulp-imagemin here</a>.</li></ul><p>Alright, now that explanations are out of the way let’s get to the fun parts :D</p><h3>Project File Structure</h3><p>Start by opening up your text editor of choice and creating a directory for your project or if you have an existing directory navigate to that directory in your terminal and skip down to the <strong>Installing Node &amp; npm Section</strong>.</p><p>If you’re using <a href="https://code.visualstudio.com/">VS Code</a> you can find the <a href="https://code.visualstudio.com/docs/editor/integrated-terminal">built in terminal</a> by hitting ctrl + ` (tilde).</p><p>Here’s how my project structure looks in my terminal:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/489/0*XwDPmpdA9v9lQnRR.png" /></figure><p>And here’s how my project file structure looks in the explorer inside VS Code:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/288/0*dQsMpEbgtTaYR2FA.png" /></figure><p>As you can see I have a separate directory for my base files and the minified files. Once you have your project directory established it’s time to start installing everything we’ll need.</p><h3>Installing Node &amp; npm</h3><p>Alright, now that our directory is up and running let’s start installing our dependencies. If you already have Node &amp; npm installed, feel free to skip down to the <strong>Installing Gulp &amp; gulp-imagemin Section</strong>.</p><ol><li>First, enter node --v within your terminal to check and see if you have the Node installed. If you do, you&#39;ll get something back like v8.9.3</li><li>If you get nothing back or an error, simply download and <a href="https://nodejs.org/en/download/">install Node from here</a>. It could take a few minutes so +be patient.</li><li>Once Node.js is installed, you&#39;ll have npm installed as well because it comes bundled with Node. You can check the version of npm by typing npm -v in your terminal. You should get something like 6.4.1back.</li><li>Next we need to create a package.json file for our project. We do this by using the command npm init (find out more about <a href="https://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json/">package.json here</a>). You&#39;ll be asked a series of questions but if you don&#39;t want to answer them you don&#39;t have to, just hit enter until you see Is this OK? (yes), then hit Enter one last time and you&#39;ll be finished with this section.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/707/0*LDQQx_ktdps9IL28.png" /></figure><p>You’ll notice that this file was created in a different directory than the one I started with. This is so I can provide an example, as I have previously installed all of this in my current project directory.</p><h3>Installing Gulp &amp; gulp-imagemin</h3><p>Once Node &amp; npm have been installed, we can now install Gulp &amp; gulp-imagemin by following these steps:</p><ol><li>First, type npm install --save-dev gulp in your terminal. If you want to know what the --save-dev flag does, check out this <a href="https://stackoverflow.com/questions/19223051/what-does-save-dev-mean-in-npm-install-grunt-save-dev">Stack Overflow post</a>.</li><li>Again, be patient as installing Gulp might take a minute but you’ll eventually end up with something like this: gulp@4.0.0 added 318 packages from 218 contributors and audited 6376 packages in 49.362s found 0 vulnerabilities</li><li>You can check your Gulp version by typing gulp -v in your terminal and you&#39;ll get something similar to this: [13:06:56] CLI version 2.0.1 [13:06:56] Local version 4.0.0</li><li>Now let’s install gulp-imagemin by typing npm install --save-dev gulp-imagemin and again you&#39;ll get something like this back: gulp-imagemin@5.0.3 added 232 packages from 97 contributors and audited 10669 packages in 39.103s found 0 vulnerabilities</li><li>And the final step for this section is to create our gulpfile.js <strong>It is very important that your file has this exact name and is in the outer most level of your project folder structure!</strong></li></ol><h3>Writing the Code — Finally the Fun!</h3><p>Ok, now that we’ve taken care of installing everything in the correct place, let’s open up our gulpfile.js and write the actual code that will do all of the hard work.</p><ol><li>Start by requiring gulp --&gt; const gulp = require(&#39;gulp&#39;);We&#39;re basically taking advantage of Node&#39;s module system to use code that is located in different files</li><li>Now require gulp-imagemin --&gt; const imagemin = require(&#39;gulp-imagemin&#39;); Again we&#39;re taking advantage of the module system to use this code in our project</li><li>Now, we need to write the function that will do all of the image squashing: <br>function imgSquash() {<br><strong>return</strong> gulp <strong>.</strong>src(&quot;./img/*&quot;)<br><strong>.</strong>pipe(imagemin()) <br><strong>.</strong>pipe(gulp<strong>.</strong>dest(&quot;./minified/images&quot;));<br>}</li><li>If you set your directory up following mine, the code above will work. If your directory looks different you will need to change the .src &amp; .dest lines to match where your files are located and where you want them piped to after they&#39;ve been minified.</li><li>Gulp operates based off of tasks and we can give it plenty of those to keep it busy. Once we&#39;ve defined the actual function to do the heavy lifting, we need to tell Gulp what to do with that function: gulp.task(&quot;imgSquash&quot;, imgSquash);</li><li>Now, we want Gulp to watch our given directory for changes (new images) and when it detects those, we want it to automatically run our imgSquash function, minify our images, and pipe them to the destination we set. We achieve that by defining another task to watch the directory: <br>gulp<strong>.</strong>task(&quot;watch&quot;, () <strong>=&gt;</strong> { <br> gulp<strong>.</strong>watch(&quot;./img/*&quot;, imgSquash);<br>});</li><li>The last step to writing the code is defining the last task to call our imgSquash and watch tasks in succession: gulp<strong>.</strong>task(&quot;default&quot;,gulp<strong>.</strong>series(&quot;imgSquash&quot;,&quot;watch&quot;)); Here the word &quot;default&quot; refers to the word gulp in the terminal and the gulp.series will ensure that the imgSquash function runs and immediately after Gulp will watch the directory for changes.</li></ol><p>Here is what our finished file should look like:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/555/0*H5JPQ11p7bgMZZ34.png" /></figure><p>Save this file, open your terminal, and type gulp and hit enter. You should see something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/0*Ji0ot-znERcdjJIf.png" /></figure><p>As you can see, each time a new file was added to the base directory, our tasks kicked in because Gulp was watching and immediately ran our imgSquash function to minify our images. When you&#39;re finished using Gulp you can hit ctrl + c in your terminal to terminate the watch process.</p><p>Now you can start using your minified images on your website/app and enjoy that new found boost in performance!</p><h3>Wrap Up</h3><p>Gulp is a very powerful JavaScript build tool that can help automate some of the more tedious, but important, aspects of building your project. With less than an hour’s worth of work you were able to get your images minified, thus reducing load time and increasing performance for your website/app. That’s awesome and you should be proud of yourself!</p><p>This is just one of the many ways that build tools like Gulp can help you. There are many more ways it can help (minifying/concatenating CSS/JS files) and I hope you explore some of those awesome options.</p><p>If you enjoyed this article please consider donating some claps as it helps others find my work. Also, drop a comment and let me know what you’re working on and how Gulp helps you focus on the building.</p><p>And finally, this article was originally posted on <a href="https://jonathansexton.me/blog">my personal blog</a>. While you’re there don’t forget to sign up for the <strong>Newsletter</strong> which can be found at the top right corner of my blog page. I send it out monthly (I promise not to spam your inbox) and it’s filled with awesome articles from across the web that I think you’ll find helpful.</p><p>As always, have an awesome day full of love, happiness, and coding!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6c226046e08e" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-minify-images-with-gulp-gulp-imagemin-and-boost-your-sites-performance-6c226046e08e">How to minify images with Gulp &amp; gulp-imagemin and boost your site’s performance</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
Why Progressive Decentralization is blockchain’s best hope
]]>
      </title>
      <link>
https://medium.freecodecamp.org/why-progressive-decentralization-is-blockchains-best-hope-31a497f2673b?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/31a497f2673b</guid>
      <category>
        <![CDATA[ blockchain ]]>
      </category>
      <category>
        <![CDATA[ decentralization ]]>
      </category>
      <category>
        <![CDATA[ apps ]]>
      </category>
      <category>
        <![CDATA[ ethereum ]]>
      </category>
      <category>
        <![CDATA[ tech ]]>
      </category>
      <dc:creator>
        <![CDATA[ Arthur Camara ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 19:36:48 GMT</pubDate>
      <atom:updated>2019-02-06T19:36:48.249Z</atom:updated>
      <content:encoded>
        <![CDATA[
<h4>Immutability is blockchain’s greatest strength and biggest barrier. Progressive decentralization could be the answer.</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*qgm9rHxUeF-oy6NxHnXv_A.png" /></figure><p>When we released <a href="https://www.cryptokitties.co">Crypt
]]>
        <![CDATA[
oKitties</a> a year ago, we opted not to fund it up front with an ICO but instead build it on a sustainable revenue model. That model is this: we collect a fee of 3.75% from every transaction in the game. Given that we’d be unable to change the fee once we launched — CryptoKitties is built o
]]>
        <![CDATA[
n the Ethereum blockchain — people often ask how we arrived at that number.</p><p>It sounds like a smart, well-reasoned choice. I could spin a compelling story about how we ran simulations with advanced prediction models to find the fee that would yield optimal returns.</p><p>But that’s not true.</p><p>The truth is we made an educated guess. We picked a number that felt fair and we committed to it.</p><h3>Immutability is awesome and scary</h3><p>We easily could have chosen wrong, and since you can’t change something once you add it to the blockchain, that would have been <em>cat-astrophic</em>. Fortunately for CryptoKitties, our community is so passionate and the Kitties are so adorable that 3.75% worked just fine.</p><p>Immutability, the inability to be edited, is at once the blockchain’s greatest strength and its largest barrier to meaningful adoption. The pressures of immortal code paralyze developers: you can tinker in a test environment forever, but there will always be real-world variables you can’t anticipate. Covering your eyes and hitting launch is no way to make breakthroughs. It’s more likely to produce breakdowns.</p><p>Our fee was just one decision among many: how long should breeding a Kitty take? At what rate should their breeding cooldowns slow? How much should a Gen 0 cat cost? On blockchain, even a seemingly minor choice can pose serious, even critical, consequences.</p><p>Decentralization offers everyday people immense benefits: the fairness of permanent and universal rules and the transparency of code and behavior which, combined, create security. However, because it’s often implemented with all-or-nothing immutability, blockchain makes agile development impossible and slows teams to a crawl.</p><p>Agility requires iteration. Iterating quickly is key to building the best products, and the best products spark mass adoption.</p><h3>Enter Progressive Decentralization</h3><p>We encountered these barriers ourselves building CryptoKitties, which forced us to negotiate including decentralized features while building something that, ya know, works. Since then, we’ve started exploring progressive decentralization in development, an idea we briefly introduced <a href="https://medium.com/dapperlabs/how-we-launched-cryptokitties-latest-feature-6318ecceba9f">a while ago</a>.</p><p>Let’s take a deeper dive now.</p><p>Simply put, progressive decentralization advocates easing into decentralization in stages rather than diving in headfirst. What that looks like is building mechanisms into smart contracts that confer special powers to the creators up front, then incrementally lock those powers away in a transparent and systematic way.</p><p>The critical condition is that the locking mechanisms must be public and immutable from the start. The creator can’t decide to tweak the terms later and indefinitely extend their power. That balance is vital: done correctly, progressive decentralization allows creators the flexibility to repair their code without compromising the decentralized features of the contract.</p><h3>Progressive decentralization can take many forms</h3><p>There’s no one right way to implement progressive decentralization. There are dozens of variables to consider, and the best approach will vary from project to project.</p><p>Here are a couple ways developers could approach progressive decentralization:</p><ol><li>Author multiple contracts with appropriate separation of concerns and the ability to replace some of those contracts. Some decentralized apps (“dapps”) like <a href="https://decentraland.org/">Decentraland</a>, which features upgradable contracts, are already using this.</li><li>Configurable variables and permissions to change those values independently. <a href="https://www.etheremon.com/">Etheremon</a>, for instance, <a href="https://github.com/Etheremon/smartcontract/blob/master/EtheremonERC721.sol#L125">grants special permissions</a> to groups of users who become moderators.</li><li>Incorporate a predefined set of ascending levels in the contract, each allowing the creators certain capabilities. The levels can only be increased, never decreased, so backtracking isn’t an option. On level 1, for example, the contract owners can play around with all gameplay variables. At level 2, their capability to modify core variables ends. At the final level, the contract revokes all their special privileges.</li></ol><p>To die-hard decentralists, some of this probably sounds too centralized. But this is just the starting point. There are further measures to balance decentralization with iteration. The solution combines transparency of the purpose and the conditions and constraints in the contracts. These constraints could include:</p><ol><li><strong>Selection:</strong> Not everything can be modified, only the specific items that we need to iterate.</li><li><strong>Range:</strong> For many of the questions around game economies, we may have a general idea but not know the precise answer. Limiting configuration to a certain range guarantees users that the iteration will land within a reasonable scope.</li><li><strong>Direction:</strong> Similar to the “levels” concept above, allow certain variables to move only in one direction, decreasing or increasing but never backtracking.</li></ol><h3>Holding creators accountable</h3><p>All this sounds great in theory. But how do we ensure creators stay true to their roadmap and reach the fully decentralized version of their contracts? How can users opt-in early with the guarantee that the system is an application of progressive decentralization? How can we know we won’t end up with just another flawed, centralized system?</p><p>Progressive decentralization includes tenets to keep creators accountable:</p><h4><strong><em>Time- or block-based maturity</em></strong></h4><p>Lock certain configuration values, revoke the owner’s capabilities or move to the next level of maturity past a certain time or block number. Once that point is reached, the contract automatically changes.</p><p>Imagine, for example, that CryptoKitties had a runway of 360,000 blocks (around 60 days’ time) from the moment it launched to adjust the Kitties’ breeding <em>cooldown</em> variables. We could tweak the cooldown mechanics until that point, giving ourselves the breathing room to perfect the balance, while still guaranteeing players that we wouldn’t have that power indefinitely.</p><h4><strong><em>Usage-based maturity</em></strong></h4><p>Lock those capabilities once a certain number of users or transactions are completed. This option needs to be carefully thought out to avoid exploits, but we could have, for example, built configurable fees into CryptoKitties that would lock in after 10,000 transactions.</p><h4><strong><em>Economic incentive</em></strong></h4><p>Align the creator’s incentives with increased decentralization. In this scenario, the creators profit more when the contract becomes more decentralized. Perhaps the fee rises with each level the developer ascends, locking in at the maximum fee when they reach full decentralization. Or, alternatively, perhaps they make no money at all until full decentralization is in place. This financial reward motivates the developer to reach decentralization at a reasonable pace.</p><h3>There’s no best approach to building on the blockchain</h3><p>“Progressive decentralization” is really an umbrella encompassing many strategies, mechanisms, and tools to make building on the blockchain more viable. The best way to apply progressive decentralization will always depend on the project and use a mix of the concepts outlined above.</p><p>Progressive decentralization is not perfect. The ideal smart contract is simple and straightforward, and these measures add complexity. How and how much to incorporate it is a trade-off that needs to be evaluated on a case-by-case basis.</p><p>Although it may anger hardline decentralists, we believe progressive decentralization is far better for users in the long run: by giving developers the flexibility to adjust, the consumer gets a more useful product. That means they’ll actually use it, and once it brings value to their lives, they’ll sing its praises to the people around them. That’s how mass adoption starts.</p><p><em>Authors: </em><a href="https://medium.com/@arthur_camara"><em>Arthur Camara</em></a><em>, </em><a href="https://medium.com/@dete73"><em>Dieter Shirley</em></a><em>, and Grady Mitchell</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=31a497f2673b" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/why-progressive-decentralization-is-blockchains-best-hope-31a497f2673b">Why Progressive Decentralization is blockchain’s best hope</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
When to use different machine learning algorithms: a simple guide
]]>
      </title>
      <link>
https://medium.freecodecamp.org/when-to-use-different-machine-learning-algorithms-a-simple-guide-ba615b19fb3b?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/ba615b19fb3b</guid>
      <category>
        <![CDATA[ data-science ]]>
      </category>
      <category>
        <![CDATA[ artificial-intelligence ]]>
      </category>
      <category>
        <![CDATA[ computer-science ]]>
      </category>
      <category>
        <![CDATA[ machine-learning ]]>
      </category>
      <category>
        <![CDATA[ algorithms ]]>
      </category>
      <dc:creator>
        <![CDATA[ Roger Huang ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 19:30:14 GMT</pubDate>
      <atom:updated>2019-02-06T19:30:14.829Z</atom:updated>
      <content:encoded>
        <![CDATA[
<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*uvJMjgk5h-wS7PkdHVJ7GA.jpeg" /></figure><p>If you’ve been at machine learning long enough, you know that there is a “no free lunch” principle — there’s no one-size-fits-all algorithm that will help you solve every problem and tackle every dataset.</p><p>I work for Springboard — we’ve put a lot of research into machine learning training and resources. At Springboard, <a href="https://www.springboard.com/workshops/ai-machine-learning-career-track/?utm_source=freecodecamp&amp;utm_medium=medium&amp;utm_content=freecodecampdifferentml">we offer the first online course with a machine learning job guarantee</a>.</p><p>What helps a lot when confronted with a new problem is to have a primer for what algorithm might be the best fit for certain situations. Here, we talk about different problems and data types and discuss what might be the most effective algorithm to try for each one, along with a resource that can help you implement that particular model.</p><p>Remember: the proof is in the pudding: the best approach to your data is the model that empirically gives you the best results. This guide is meant to hone your first instincts and help you remember what models might be the most effective for each problem, and which would be impractical to use.</p><p>Let’s start by talking about the variables we need to consider.</p><h4>U<strong>nsupervised learning vs supervised learning</strong></h4><p><strong>Unsupervised learning</strong> is where you allow the machine learning algorithm to start learning and outputting a result without any explicit human processing of the data beforehand.</p><p><strong>Supervised learning</strong> involves some labeling and processing of the training data beforehand in order to structure it for processing.</p><p>The kind of learning you can perform will matter a lot when you start working with different machine learning algorithms.</p><h4>S<strong>pace and time considerations</strong></h4><p>There are <strong>space and time considerations</strong> for each machine learning algorithm. While in practice you’ll likely work with optimized versions of each algorithm packaged in a framework, it is good to consider how the algorithms you choose can affect performance.</p><h4>The output</h4><p>Third, and perhaps most important, is <strong>the output that you want to get</strong>. Are you trying to categorize data? Use it to predict future data points? What you’re looking to get as a result and what you want to do to your data will largely determine the algorithmic approaches you should take.</p><h3>Some examples</h3><h4><strong>You’re looking to</strong><strong>build a simple predictive model with a well-structured dataset without too many complications.</strong></h4><p>Your best bet here is probably linear regression, something that can take a whole host of factors and then give you a predictive result with a simple error rate explanation and a simple explanation for which factors contribute to the prediction. It doesn’t take much computational power to run a linear regression either.</p><p><strong>Resource</strong>: <a href="https://towardsdatascience.com/linear-regression-detailed-view-ea73175f6e86">Linear Regression — Detailed View</a></p><h4><strong>You’re looking to classify</strong><strong>data that’s already been labeled into two or more sharply distinct types of labels (e.g., trying to determine if children are likely male or female based on their weight and height) in a supervised setting.</strong></h4><p>The first instinct you should have when you see a situation like this is to apply the <strong>logistic regression model</strong>. After running the model, you’ll see that it forces every data point into two different categories, allowing you to easily output which point belongs to which category. The logistic regression model can also be easily generalized to working with multiple target and result classes if that’s what your problem demands.</p><p><strong>Resource</strong>: <a href="https://towardsdatascience.com/building-a-logistic-regression-in-python-301d27367c24">Building a Logistic Regression</a></p><h4><strong>You’re looking to place unlabeled continuous data into different groups (e.g., putting customers with certain recorded traits and trying to discover categories/groups they can belong to).</strong></h4><p>The first natural fit for this problem is the K-Means clustering algorithm, which will group and cluster data by measuring the distance between each point. Then there are a variety of clustering algorithms, such as Density-Based Spatial Clustering of Applications with Noise and Mean-Shift algorithms.</p><p><strong>Resource</strong>: <a href="https://towardsdatascience.com/the-5-clustering-algorithms-data-scientists-need-to-know-a36d136ef68">The 5 Clustering Algorithms Data Scientists Need to Know</a></p><h4><strong>You’re looking to predict whether a string of characters or a grouping of traits falls into one category of data or another (supervised text classification) — e.g, whether a review is positive or negative.</strong></h4><p>Your best bet here is probably Naive Bayes, which is a simple but powerful model that can be used for text classification. With some text pre-processing and cleaning (being especially careful to remove filler stop words such as “and” that might add noise to your dataset), you can get a remarkable set of results with a very simple model.</p><p>Another decent bet is logistic regression, which is a simple model to grasp and explain, and less hard to pick apart than Naive Bayes (which will often assign probabilities word by word rather than holistically labeling a text snippet as being part of one group or another).</p><p>Moving on to something more powerful, a Linear Support Vector Machine algorithm will likely help improve your performance. If you want to skip right ahead here, you can (though I suggest trying both models and comparing which one works best — <a href="https://scikit-learn.org/stable/modules/naive_bayes.html">Naive Bayes has an absurdly easy implementation</a> on frameworks like scikit-learn and it isn’t very computationally expensive so you can afford to test both).</p><p>Lastly, bag-of-words analysis could also work — consider doing an ensemble of different methods and testing all of these methods against one another, depending on the dataset in question.</p><p><strong>Resource</strong>: <a href="https://towardsdatascience.com/multi-class-text-classification-model-comparison-and-selection-5eb066197568">Multi-Class Text Classification Model Comparison and Selection</a></p><h4><strong>You’re looking to do unstructured learning on large-scale image or video datasets (e.g., image classification).</strong></h4><p>The best algorithm to tackle going through different images is a convolutional neural network that is organized similarly to how animal visual cortexes are analyzed.</p><p>Measured by performance (reduced error rate) in the ImageNet competition, the SE-Resnet architecture comes out on top, though as the field is still developing, new advances come out almost every day.</p><p>You should be aware, however, that convolutional neural networks are dense and require a lot of computational power — so make sure that you have the hardware capability to run these models on large-scale datasets.</p><p><strong>Resource</strong>: <a href="https://medium.com/zylapp/review-of-deep-learning-algorithms-for-image-classification-5fdbca4a05e2">Review of Deep Learning Algorithms for Image Classification</a></p><h4><strong>You’re looking to classify result points that come out of a well-defined process (ex: number of hires from a pre-established interview process, wherein you know or can computationally infer the probabilities of each event).</strong></h4><p>The best option for this is probably a decision tree algorithm that will clearly explain what the split points are between classifying something into one group or another.</p><p><strong>Resource</strong>: <a href="https://towardsdatascience.com/decision-trees-in-machine-learning-641b9c4e8052">Decision Trees in Machine Learning</a></p><h4>You’re looking to do time series analysis with well-defined, supervised data (e.g., predicting stock prices based on historical patterns in the stock market arranged on a chronological basis from the past to the present).</h4><p>A recurrent neural network is set up to do sequence analysis by containing an in-stream internal memory of data it processes, allowing it to take into account the relationship between data and the time horizon and order it’s deployed in.</p><p><strong>Resource</strong>: <a href="https://towardsdatascience.com/recurrent-neural-networks-and-lstm-4b601dd822a5">Recurrent Neural Networks and LSTM</a></p><h3>Wrapping up</h3><p>Take the recommendations and resources above, and apply them as a sort of first instinct for your modeling — it’ll help you jump into any work you do just a little bit faster. If you’re interested in being mentored by a machine learning expert in learning how to train your instincts further, check out Springboard’s <a href="https://www.springboard.com/workshops/ai-machine-learning-career-track/?utm_source=freecodecamp&amp;utm_medium=medium&amp;utm_content=freecodecampdifferentml">AI/Machine Learning Career Track</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ba615b19fb3b" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/when-to-use-different-machine-learning-algorithms-a-simple-guide-ba615b19fb3b">When to use different machine learning algorithms: a simple guide</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
How to set up networking in your Android app with Retrofit-RxJava-MVP
]]>
      </title>
      <link>
https://medium.freecodecamp.org/how-to-set-up-networking-in-your-android-app-with-retrofit-rxjava-mvp-108e7153521a?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/108e7153521a</guid>
      <category>
        <![CDATA[ rxjava ]]>
      </category>
      <category>
        <![CDATA[ mobile-app-development ]]>
      </category>
      <category>
        <![CDATA[ android ]]>
      </category>
      <category>
        <![CDATA[ software-development ]]>
      </category>
      <category>
        <![CDATA[ technology ]]>
      </category>
      <dc:creator>
        <![CDATA[ Ayusch Jain ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 15:31:14 GMT</pubDate>
      <atom:updated>2019-02-06T15:31:14.141Z</atom:updated>
      <content:encoded>
        <![CDATA[
<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_qQps59angkeAdcbql2rnA.png" /></figure><blockquote>This article was originally posted <a href="https://ayusch.com/networking-with-retrofit-rxjava-mvp">here</a></blockquote><p>In this Android App development tutorial, I’ll be demo
]]>
        <![CDATA[
nstrating how you can setup Retrofit and RxJava for networking in your android application along with MVP Architecture.</p><p>We’ll be developing a very barebones application which will display some data in recyclerview. The data will be obtained from a fake JSON API hosted on <a href="https://jsonplaceholder.typicode.com">https://jsonplaceholder.typicode.com</a>. The application will display data in three columns namely ID, Title and Body.</p><p>Here are the prerequisites to this tutorial:</p><ul><li><a href="https://ayusch.com/mvp-architecture-android/">How to Implement MVP Architecture in Android</a></li><li><a href="https://ayusch.com/understanding-rxjava-basics">Understanding RxJava Basics</a></li></ul><p>Once you go through the above two, you are ready to move forward with this article. I’ve divided this into 4 phases:</p><ul><li>Setting up the project and building layouts.</li><li>Setting up MVP Architecture.</li><li>Creating Model class for data and adapter for RecyclerView.</li><li>Setting up Networking with Retrofit and RxJava.</li></ul><p>So, let’s get started!</p><blockquote>Note: Some <a href="http://microverse.org">online schools</a> such as Udemy and Lynda also have good tutorials on RxJava</blockquote><h3>Phase 1: Setting up the project and building layouts.</h3><h4>Create a new project</h4><p>Create a new project in android studio. Go to File -&gt; New Project and select <strong>“Empty Activity”. </strong>Then click Finish.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*USz1sCRrlkWGE4f6.png" /></figure><h4><strong>Adding a Recyclerview</strong></h4><p>To add a recyclerview to your project, open app level build.gradle file and add the following dependency at the bottom:</p><pre>implementation &#39;com.android.support:design:28.0.0&#39;</pre><blockquote><em>Note: You can also add recyclerview directly instead of the entire design library, but most of you might already have it included so I’m including the design library in this example. You can include just the recyclerview as well.</em></blockquote><p>Now head over to your main layout file, in my case activity_main.xml and add a recyclerview inside the root layout:</p><pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;<br> xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;<br> xmlns:tools=&quot;http://schemas.android.com/tools&quot;<br> android:layout_width=&quot;match_parent&quot;<br> android:layout_height=&quot;match_parent&quot;<br> tools:context=&quot;.UserActivity&quot;&gt;</pre><pre> &lt;android.support.v7.widget.RecyclerView<br> android:id=&quot;@+id/recyclerview&quot;<br> android:layout_width=&quot;match_parent&quot;<br> android:layout_height=&quot;match_parent&quot; /&gt;</pre><pre>&lt;/LinearLayout&gt;</pre><h4>Building Recyclerview Item</h4><p>Now let’s start building the RecyclerView rows. Here we are only concerned about the architecture of our Android application and how Retrofit, RxJava and MVP Architecture can work in tandem, so don’t complain about the look of the UI :P. You can definitely go ahead and beautify it.</p><p>We’ll be creating a really simple three column layout. The first column will display the ID of the item, the second column will display the Title, and finally, the third column will display the body/description.</p><p>Go to res-&gt;layout and right click on the layout folder. Create a new <strong>“Layout Resource File”. </strong>Name it whatever you want, in my case I’ll name it <strong>recycler_item.</strong></p><p>To create a three-column layout, add a LinearLayout as the root. Then add three textviews and set their width to 0 and their weight to 1,2,3 respectively. This will divide the entire width of your screen into 3 columns in the proportion 1:2:3.</p><p>Here’s how your layout will look like:</p><pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;<br> android:layout_width=&quot;match_parent&quot;<br> android:layout_height=&quot;wrap_content&quot;<br> android:layout_marginTop=&quot;16dp&quot;<br> android:orientation=&quot;horizontal&quot;&gt;</pre><pre> &lt;TextView<br> android:id=&quot;@+id/user_id&quot;<br> android:layout_width=&quot;0dp&quot;<br> android:layout_height=&quot;wrap_content&quot;<br> android:layout_weight=&quot;1&quot;<br> android:gravity=&quot;center&quot;<br> android:padding=&quot;4dp&quot;<br> android:text=&quot;id&quot; /&gt;</pre><pre> &lt;TextView<br> android:id=&quot;@+id/user_title&quot;<br> android:layout_width=&quot;0dp&quot;<br> android:layout_height=&quot;wrap_content&quot;<br> android:layout_weight=&quot;2&quot;<br> android:gravity=&quot;center&quot;<br> android:padding=&quot;4dp&quot;<br> android:text=&quot;Title&quot; /&gt;</pre><pre> &lt;TextView<br> android:id=&quot;@+id/user_body&quot;<br> android:layout_width=&quot;0dp&quot;<br> android:layout_height=&quot;wrap_content&quot;<br> android:layout_weight=&quot;3&quot;<br> android:gravity=&quot;center&quot;<br> android:padding=&quot;4dp&quot;<br> android:text=&quot;Body&quot; /&gt;</pre><pre>&lt;/LinearLayout&gt;</pre><p><strong>Again, since this is not a design tutorial the UI might not look very pretty, so feel free to customize it as you like 😉</strong></p><p>Now with the layouts all done, we can head over to set up our android application in accordance with MVP Architecture. Again, if you aren’t really familiar with MVP, I strongly suggest that you have a look here: <a href="https://ayusch.com/mvp-architecture-android/">MVP Architecture in Android</a>.</p><h3>Phase 2: Setting up MVP Architecture</h3><h4>Creating the contract</h4><p>Many people like to keep their View and Presenter interfaces in different files, but according to Google’s suggested guidelines, I like to create an outer interface (Wrapper) named <strong>Contract </strong>and then place my View and Presenter Interfaces inside it.</p><p>The benefit of this is that you won’t have to go looking at different files for the view and presenter associated with a single activity, it’s all in a single place. That’s how I like it, but feel free to explore other techniques.</p><p>So now let’s create a UserActivityContract. Create a new package named <strong>“contract”. </strong>Inside that package, create a new Java Interface UserActivityContract.</p><p>Within <strong>UserActivityContract</strong>, add two nested interfaces: View and Presenter. This is how your contract will look like at the end:</p><pre>public interface UserContract {<br> interface View {</pre><pre> }</pre><pre> interface Presenter {</pre><pre> }<br><br>}</pre><p>Now let’s add some methods to these. Let’s talk about the View first, we’ll be doing 3 major things inside our view:</p><ul><li>Initial setup of recyclerview (adding layout manager).</li><li>Creating an adapter from recyclerview using the list of users obtained from the API.</li><li>Showing some error message in case any error occurs.</li></ul><p>So, let’s add a method for each one of these:</p><pre>public interface UserContract {<br> interface View {<br> void init();</pre><pre> void showError(String message);</pre><pre> void loadDataInList(List&lt;User&gt; users);<br> }</pre><pre> interface Presenter {<br></pre><pre> }<br><br>}</pre><p>Next, let’s talk about the Presenter. The only real task of the presenter is to get the data from the API and send it to the View. So, add a method <strong>loadUsers() </strong>we’ll be making our API call here and passing the result to view if successful, else an error message.</p><pre>public interface UserContract {<br> interface View {<br> void init();</pre><pre> void showError(String message);</pre><pre> void loadDataInList(List&lt;User&gt; users);<br> }</pre><pre> interface Presenter {</pre><pre> void start();</pre><pre> void loadUsers();<br> }<br><br>}</pre><p>Notice that apart from loadUsers(), we have also added a method named <strong>start(),</strong> this is more of like an initializer method for the presenter. You can perform all sorts of init tasks here such as initializing some variables, calling a method of the view to show some init messages etc. Here I’m using it to initialize the Recyclerview inside my UserActivity.java class.</p><h4>Creating Presenter and Implementing View</h4><p>Once done with the interfaces, it’s time to implement them.</p><p>Create a new class named UserPresenter and implement UserContract.Presenter on it and implement the required methods.</p><p>Now, open your UserActivity.java class and implement the interface UserContract.View and implement all the required methods. Add a field for the presenter in your activity and initialize it in onCreate as shown below:</p><pre>mPresenter = new UserPresenter(this);<br>mPresenter.start();</pre><p>This will call the constructor of our presenter and bind the View and Presenter together. When we call the start method on presenter, presenter in-turn calls the init() method which starts our initialization process.</p><p><strong>With this,</strong> we finish <strong>Phase 2 </strong>of our project. Now let’s head over to <strong>Phase 3</strong> and create our model class and a custom adapter to bind data to recyclerview.</p><h3>Phase 3: Creating Model class for data and adapter for RecyclerView</h3><h4>Creating the model</h4><p>Let’s go ahead and create our model which will be a POJO class for our data. If you look closely at the JSON response, it consists of 4 fields: id, userId, title, body. And all of this inside a JSON object. And many such JSON objects in an array. So, this is a fairly simple POJO class to create.</p><p>But before this, let’s add a dependency for GSON, which will be used to parse the JSON response. Add the following line to your dependencies:</p><pre>implementation &#39;com.squareup.retrofit2:converter-gson:2.4.0&#39;</pre><blockquote><em>Note: This is not the actual GSON dependency, this is a converter which uses GSON for serialization to and from JSON.</em></blockquote><p>Now, create a package named <strong>model </strong>and inside it, create a java file named <strong>User</strong>. Add the four fields and annotate each of the fields with <strong>@SerializedName</strong>. Now let’s create getters and setters for the fields. Android Studio does this automatically for you, just press ALT+INS on your keyboard and select getters and setters.</p><p>This is how your POJO class would look like at the end:</p><pre>public class User{</pre><pre> @SerializedName(&quot;id&quot;)<br> private int id;</pre><pre> @SerializedName(&quot;title&quot;)<br> private String title;</pre><pre> @SerializedName(&quot;body&quot;)<br> private String body;</pre><pre> @SerializedName(&quot;userId&quot;)<br> private int userId;</pre><pre> public void setId(int id){<br> this.id = id;<br> }</pre><pre> public int getId(){<br> return id;<br> }</pre><pre> public void setTitle(String title){<br> this.title = title;<br> }</pre><pre> public String getTitle(){<br> return title;<br> }</pre><pre> public void setBody(String body){<br> this.body = body;<br> }</pre><pre> public String getBody(){<br> return body;<br> }</pre><pre> public void setUserId(int userId){<br> this.userId = userId;<br> }</pre><pre> public int getUserId(){<br> return userId;<br> }</pre><pre> @Override<br> public String toString(){<br> return <br> &quot;User{&quot; + <br> &quot;id = &#39;&quot; + id + &#39;\&#39;&#39; + <br> &quot;,title = &#39;&quot; + title + &#39;\&#39;&#39; + <br> &quot;,body = &#39;&quot; + body + &#39;\&#39;&#39; + <br> &quot;,userId = &#39;&quot; + userId + &#39;\&#39;&#39; + <br> &quot;}&quot;;<br> }<br>}</pre><blockquote><em>Note: toString method is optional. I like to include it because when printing log statements, it prints the formatted json.</em></blockquote><h3>Creating RecyclerView Adapter</h3><p>Let’s now create the recyclerview adapter. Create a package named adapter and create a new Java class named <strong>CustomAdapter.java</strong> inside it. Extend the class from RecyclerView.Adapter class. It will show an error, just press ALT+Enter and override all the required methods.</p><p>Inside <strong>CustomAdapter.java</strong> create a nested class named MyViewHolder and extend it from RecyclerView.ViewHolder. Then create a constructor and initialize all the textviews as shown below:</p><pre>public class CustomAdapter extends RecyclerView.Adapter&lt;CustomAdapter.MyViewHolder&gt; {</pre><pre> public CustomAdapter(List&lt;User&gt; userList) {<br><br> }</pre><pre> @Override<br> public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {</pre><pre> }</pre><pre> @Override<br> public void onBindViewHolder(MyViewHolder holder, int position) {</pre><pre> }</pre><pre> @Override<br> public int getItemCount() {<br> return userList.size();<br> }</pre><pre> public class MyViewHolder extends RecyclerView.ViewHolder {</pre><pre> TextView tvId, tvTitle, tvBody;</pre><pre> public MyViewHolder(View itemView) {<br> super(itemView);<br> tvId = (TextView) itemView.findViewById(R.id.user_id);<br> tvTitle = (TextView) itemView.findViewById(R.id.user_title);<br> tvBody = (TextView) itemView.findViewById(R.id.user_body);<br> }<br> }</pre><pre>}</pre><p>We’ll be passing a list of users to this adapter and we would be doing that in the <strong>constructor</strong>. So, first create a field <strong>List&lt;User&gt;</strong> and then create a constructor which will take a List&lt;User&gt; as its argument. Now, set the field property to the one obtained in the constructor.</p><p>When you overrode the methods, you got onCreateViewHolder. In that method, we’ll inflate our layout for the recyclerview item and return a view holder from it. Head over to onCreateViewHolder and add the following code:</p><pre>@Override<br>public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {<br> View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item, parent, false);<br> return new MyViewHolder(view);<br>}</pre><p>Now, in <strong>onBindViewHolder</strong>, we’ll bind the data to our views. This is how the final adapter would look like:</p><pre>public class CustomAdapter extends RecyclerView.Adapter&lt;CustomAdapter.MyViewHolder&gt; {</pre><pre> List&lt;User&gt; userList = new ArrayList&lt;&gt;();</pre><pre> public CustomAdapter(List&lt;User&gt; userList) {<br> this.userList = userList;<br> }</pre><pre> @Override<br> public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {<br> View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item, parent, false);<br> return new MyViewHolder(view);<br> }</pre><pre> @Override<br> public void onBindViewHolder(MyViewHolder holder, int position) {<br> holder.tvTitle.setText(userList.get(position).getTitle());<br> holder.tvId.setText(userList.get(position).getId()+&quot;&quot;);<br> holder.tvBody.setText(userList.get(position).getBody());<br> }</pre><pre> @Override<br> public int getItemCount() {<br> return userList.size();<br> }</pre><pre> public class MyViewHolder extends RecyclerView.ViewHolder {</pre><pre> TextView tvId, tvTitle, tvBody;</pre><pre> public MyViewHolder(View itemView) {<br> super(itemView);<br> tvId = (TextView) itemView.findViewById(R.id.user_id);<br> tvTitle = (TextView) itemView.findViewById(R.id.user_title);<br> tvBody = (TextView) itemView.findViewById(R.id.user_body);<br> }<br> }</pre><pre>}</pre><h3>Phase 4: Setting up Networking with Retrofit and RxJava</h3><p>This is the crux of our android application. This is what you all came here for, so let’s get started.</p><p>I’ve divided setting up networking in our project into 4 parts:</p><ul><li>Creating a Retrofit adapter.</li><li>Setting up an API Service interface which defines our endpoints.</li><li>Creating a NetworkingUtil class to bind the Adapter and Service.</li><li>Creating a Utility class to make API calls and return the result to the presenter.</li></ul><p>So, let’s get started.</p><h4>Creating a Retrofit Adapter</h4><p>Create a package named “networking”, and inside networking, create another package named “adapter” (this is how I like my package management and is by no means the recommended way of doing things, but it suits me so +1).</p><p>Inside that package, create a class named RetrofitAdapter. In this class we’ll define the following things:</p><ul><li>A converter factory to parse JSON response into our POJO class.</li><li>A call adapter factory.</li><li>A base URL.</li></ul><p>Let’s start by adding a <strong>BASE_URL</strong> filed at the top. Set the base URL to <a href="https://jsonplaceholder.typicode.com">https://jsonplaceholder.typicode.com</a></p><p>Now, create a static instance of Gson and Retrofit at the top. Now, create a synchronized method as shown below and add the following code. I’ll explain what’s going on:</p><pre>public static synchronized Retrofit getInstance() {</pre><pre> if (retrofit == null) {<br> if (gson == null) {<br> gson = new GsonBuilder().setLenient().create();<br> }</pre><pre> retrofit = new Retrofit.Builder()<br> .baseUrl(BASE_URL)<br> .addConverterFactory(GsonConverterFactory.create(gson))<br> .addCallAdapterFactory(RxJavaCallAdapterFactory.create())<br> .build();</pre><pre> }</pre><pre> return retrofit;<br>}</pre><p>We are creating a singleton instance of retrofit, if the instance is already created, we just return it, else we create a new one.</p><p>To create a new instance, we are using the Retrofit.Builder() method. We set the Base URL to the URL declared at the top, we set the converter factory as Gson which will parse the JSON response for us and add a call adapter factory from RxJava 2.</p><blockquote><em>Now, you may ask what is a call adapter? So, a call adapter is basically a tool which manages the execution, and response handling of retrofit. When the client receives a response from the server, it’s meaningless to the user as it is in bytes. So the call adapter converts those bytes into meaningful java objects.</em></blockquote><blockquote><em>To know more about call adapters take a look at this awesome article : </em><a href="https://futurestud.io/tutorials/retrofit-2-introduction-to-call-adapters"><em>https://futurestud.io/tutorials/retrofit-2-introduction-to-call-adapters</em></a></blockquote><p>Since we have added <strong>RxJavaCallAdapter</strong> factory, it wraps our responses into <strong>RxJava</strong> types.</p><p>This is how our <strong>RetrofitAdapter.java class</strong> looks when complete:</p><pre>public class RetrofitAdapter {</pre><pre> private static Retrofit retrofit;<br> private static Gson gson;<br> private static final String BASE_URL = &quot;https://jsonplaceholder.typicode.com&quot;;</pre><pre> public static synchronized Retrofit getInstance() {</pre><pre> if (retrofit == null) {<br> if (gson == null) {<br> gson = new GsonBuilder().setLenient().create();<br> }</pre><pre> retrofit = new Retrofit.Builder()<br> .baseUrl(BASE_URL)<br> .addConverterFactory(GsonConverterFactory.create(gson))<br> .addCallAdapterFactory(RxJavaCallAdapterFactory.create())<br> .build();</pre><pre> }</pre><pre> return retrofit;<br> }<br></pre><pre>}</pre><h4>Creating an API Service</h4><p>Now, we’ll create an interface to define our URL endpoints.</p><p>Create a package named API inside the networking package. Inside API, create a Java Interface named UserService.java</p><p>In our very short and concise example, we’ll be calling just a single endpoint, so we’ll have only one method. You can call many different endpoints such as for login, signup, logout etc…</p><p>Add a method declaration <strong>getUsers() </strong>and annotate it with the type of request (GET or POST) and pass the endpoint.</p><p>This is how your interface must look like at the end. Note that we are returning an <strong>Observable</strong> of type <strong>List</strong>, at the end. Our RxJava call adapter does the work of creating an observable out of the response from the server.</p><pre>public interface UserService {<br></pre><pre> @GET(&quot;/posts/&quot;)<br> Observable&lt;List&lt;User&gt;&gt; getUsers();<br></pre><pre>}</pre><h4>Binding Adapter and Service</h4><p>We need to bind our adapter class to the service. For this, create a utils package inside the networking package and create a new class named <strong>NetworkingUtils.</strong></p><p>Create a static UserService instance and a method which will return a singleton instance of the userService.</p><p>This is how your <strong>NetworkingUtils</strong> would look like at the end:</p><pre>public class NetworkingUtils {</pre><pre> private static UserService userService;</pre><pre> public static UserService getUserApiInstance() {<br> if (userService == null)<br> userService = RetrofitAdapter.getInstance().create(UserService.class);</pre><pre> return userService;<br> }</pre><pre>}</pre><h4>Creating a Utility class to make API calls</h4><p>I’ve seen people do this in the Interactor. Interactor is just another layer in your MVP Architecture — some people prefer to include it, some don’t. In some projects, you’ll find Data Managers instead of an Interactor. It all comes down to your personal requirements/preference, but I personally don’t like using interactors (just like I don’t like JS :P) so I am creating a <strong>UserTask</strong> here.</p><p>But just before creating this class, let’s create a custom callback class which we can use to receive errors and results. In the root package, create a package named callback and create an interface named Callback inside this package. It will contain two methods, one for the result and other for error. This is how it’ll look like:</p><pre>public abstract class Callback&lt;T&gt; {<br> public abstract void returnResult(T t);<br> public abstract void returnError(String message);<br>}</pre><p>In the root package, create a package named <strong>utils</strong>. Inside this package create a java class named UserTask. This class will be responsible to make API calls and return the result to the presenter which will show the result or the error depending upon what we get.</p><p>If you aren’t familiar with RxJava, I strongly recommend having a look here: <a href="https://ayusch.com/understanding-rxjava-basics/">Understanding RxJava Basics</a>.</p><p>I’ve explained all about how observeOn and subscribeOn work and what are their roles. Once you’ve gone through it, you’re good to go.</p><p>In our <strong>onNext</strong> method, we’ll return the result, and in onError, we’ll return the error.</p><p>This is how UserTask.java class looks like at the end:</p><pre>public class UserTask {</pre><pre> public static void getUsers(final Callback&lt;List&lt;User&gt;&gt; callback) {<br> NetworkingUtils.getUserApiInstance()</pre><pre> .getUsers()<br> .observeOn(AndroidSchedulers.mainThread())<br> .subscribeOn(Schedulers.io())<br> .subscribe(new Observer&lt;List&lt;User&gt;&gt;() {<br> @Override<br> public void onSubscribe(Disposable d) {</pre><pre> }</pre><pre> @Override<br> public void onNext(List&lt;User&gt; users) {<br> callback.returnResult(users);<br> }</pre><pre> @Override<br> public void onError(Throwable e) {<br> callback.returnError(e.getMessage());<br> }</pre><pre> @Override<br> public void onComplete() {</pre><pre> }<br> });<br> }</pre><pre>}</pre><h3>Finishing Up</h3><p>With the major part of the work already done, we’re now left with passing the result from presenter to the view and setting the adapter for RecyclerView.</p><p>To do this, head over to <strong>UserPresenter.java</strong> class and in the loadUsers method, call <strong>UserTask.getUser()</strong> and provide a callback which returns the result or error.</p><p>In the returnResult method, we’ll call <strong>mView.loadDataInList()</strong> method passing a list of users successfully obtained. In the returnError method, we’ll call the <strong>mView.showError() </strong>method which’ll display errors if any. With this, our presenter class is complete, here’s how it looks like at the end:</p><pre>public class UserPresenter implements UserContract.Presenter {<br> UserContract.View mView;<br></pre><pre> UserPresenter(UserContract.View mView) {<br> this.mView = mView;<br> }</pre><pre> @Override<br> public void loadUsers() {<br> UserTask.getUsers(new Callback&lt;List&lt;User&gt;&gt;() {<br> @Override<br> public void returnResult(List&lt;User&gt; users) {<br> mView.loadDataInList(users);<br> }</pre><pre> @Override<br> public void returnError(String message) {<br> mView.showError(message);<br> }<br> });<br> }</pre><pre> @Override<br> public void start() {<br> mView.init();<br> }</pre><pre>}</pre><p>In <strong>UserActivity.java</strong>, inside the loadDataInList method, instantiate our customAdapter and set it to recyclerview, and in showError method, just display a toast message. This is how our UserActivity.java looks like at the end:</p><pre>public class UserActivity extends AppCompatActivity implements UserContract.View {<br><br> private UserContract.Presenter mPresenter;<br> private RecyclerView recyclerview;<br> CustomAdapter adapter;</pre><pre> @Override<br> protected void onCreate(Bundle savedInstanceState) {<br> super.onCreate(savedInstanceState);<br> setContentView(R.layout.activity_main);<br> mPresenter = new UserPresenter(this);<br> mPresenter.start();<br> }<br><br> @Override<br> public void init() {<br> recyclerview = findViewById(R.id.recyclerview);<br> RecyclerView.LayoutManager manager = new LinearLayoutManager(this);<br> recyclerview.setLayoutManager(manager);<br> mPresenter.loadUsers();<br> }</pre><pre> @Override<br> public void loadDataInList(List&lt;User&gt; users) {<br> adapter = new CustomAdapter(users);<br> recyclerview.setAdapter(adapter);<br> }</pre><pre> @Override<br> public void showError(String message) {<br> Toast.makeText(this,message,Toast.LENGTH_LONG).show();<br> }<br><br>}</pre><h3>Conclusion</h3><p>This is how you can set up your android application to use Retrofit, RxJava and MVP Architecture in tandem with each other. Let me know if you have any suggestions, in the comments section below or shoot me an email and I’ll respond asap 😉</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*L8S85AXZkyfNKpcr7B77jQ.png" /></figure><p><em>Like what you read? Don’t forget to share this post on </em><a href="https://www.facebook.com/AndroidVille"><strong><em>Facebook</em></strong></a><em>, </em><strong><em>Whatsapp</em></strong><em>, and </em><strong><em>LinkedIn</em></strong><em>.</em></p><p><em>You can follow me on </em><a href="https://www.linkedin.com/in/ayuschjain"><em>LinkedIn</em></a><em>, </em><a href="https://www.quora.com/profile/Ayusch-Jain"><em>Quora</em></a><em>, </em><a href="https://twitter.com/ayuschjain"><em>Twitter</em></a><em>, and </em><a href="https://www.instagram.com/androidville/"><em>Instagram</em></a><em> where I </em><strong><em>answer</em></strong><em> questions related to </em><strong><em>Mobile Development, especially Android and Flutter</em></strong><em>.</em></p><p><strong><em>If you want to stay updated with all the latest articles, subscribe to the weekly newsletter by entering your email address in the form on the top right section of this page.</em></strong></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=108e7153521a" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-set-up-networking-in-your-android-app-with-retrofit-rxjava-mvp-108e7153521a">How to set up networking in your Android app with Retrofit-RxJava-MVP</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
Real world data science project: traffic accident analysis
]]>
      </title>
      <link>
https://medium.freecodecamp.org/real-world-data-science-project-traffic-accident-analysis-e5a36775ee11?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/e5a36775ee11</guid>
      <category>
        <![CDATA[ python ]]>
      </category>
      <category>
        <![CDATA[ data ]]>
      </category>
      <category>
        <![CDATA[ tech ]]>
      </category>
      <category>
        <![CDATA[ programming ]]>
      </category>
      <category>
        <![CDATA[ data-science ]]>
      </category>
      <dc:creator>
        <![CDATA[ Hari Santanam ]]>
      </dc:creator>
      <pubDate>Wed, 06 Feb 2019 14:49:58 GMT</pubDate>
      <atom:updated>2019-02-06T23:11:02.155Z</atom:updated>
      <content:encoded>
        <![CDATA[
<h4><strong>Using Python and Folium to clean, analyze and visualize state traffic accident data</strong></h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/1*Ip96iQ8qKQMwTHVLPEtlRA.gif" /><figcaption>Driving in the snow. GIF and source: mine :).</figcaption></figure><p>I love dat
]]>
        <![CDATA[
a science, data visualization and analysis. Recently, I researched a project that piqued my interest — statewide traffic accidents.</p><p>Real-life data science processes and tasks are things that data scientists (in the broadest sense) have to do. This includes collecting, collating, cleaning, aggregating, adding and removing parts of the data. It also includes deciding how to analyze the data.</p><p>And that’s only the first part! After that, they have to decide how to present the output.</p><p>With that said, here is what I did in a recent project.</p><p>I collected traffic accident data from the State of New Jersey (NJ), USA for the year 2017. This was the latest year for which there was data on the NJ state government web site.</p><p>I am glad for the open policy of sharing data with the citizens, though the data organization is somewhat quirky (my opinion!), and it is not, as might be expected, straightforward.</p><p>Here are the steps I took for the project:</p><ul><li>I collected, cleaned, and analyzed the data.</li><li>The data had to be split into two subsets. One set had exact geo-coordinates, one did not.</li><li>Gathered information and prepared data.</li><li>Created heat maps — static and with time that shows accidents by location, for the year, over a map of NJ, for visualization.</li></ul><p>Before going forward, I’ll provide some context to those who may not be familiar with the region’s geography.</p><p>The state of New Jersey is located to the west of New York City and extends west and south (and a little north).</p><p>Basically, drivers going from New York City directly to the rest of the US (except North to the New England region and Canada) by automobile have to pass through NJ. The state has an excellent connection of highways. It also has a dense population of suburbs, and once you get past many kilometers of tightly knit older towns, there are suburban, pastoral and even rural areas.</p><h4><strong>Data prep and cleansing</strong></h4><p>Here are the steps I took to clean and prepare the data set:</p><ul><li><strong>Search and research the data.</strong> I obtained the data from the New Jersey State government site. Latitude and Longitude (Lat, Long) are geographic coordinate points that can map locations on any point on Earth. Read <a href="https://en.wikipedia.org/wiki/Geographic_coordinate_system#Latitude_and_longitude">here</a> for more information about them.</li><li>I used the summary data for the whole state for 2017, the latest year for which there is data.</li><li>There is a separate file that lists the headers and their descriptions. I copied the header file into Excel, parsed it, then pasted that using a text editor.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/861/1*m5jGcTkhGxge_UGu-U0LZQ.png" /><figcaption>The header file — I copied from the pdf into Excel then parsed it.</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/828/1*DqHGY09DfMy6s3bZmF9ZIA.png" /><figcaption>2nd step: Deleted some items, saved as csv file.</figcaption></figure><p>What did these steps find?</p><p>Out of approximately 277,000 rows, only 70,000 had latitude and longitude coordinates (or about 26%).</p><p>This presented a challenge. After all, the objective of the project is to produce a visual representation overlay of accident data across NJ. Here’s what I did:</p><p>I separated the rows with no Lat, Long coordinates into a new pandas dataframe. These rows did have a town name, so I decided to do separate heatmap for the towns for this data.</p><p>So there are two sets of heat maps: one for the dataset with precise Latitude and Longitude coordinates, the other for the other data with only town information.</p><p>I wrote some code to get the town Lat, Long coordinates for this data. Now this dataset is far larger, comprising 74% of the total data! This is real-life data — often incomplete and in need of cleansing and preparing.</p><p>See the initialization code snippet below.</p><pre>#TSB - Import Tools, read the file, prep the data<br>#the column names are in a different (pdf)file, so they need to be defined here</pre><pre>#tools below required for drawing the map with data overlayed on it </pre><pre>import folium <br>import folium.plugins as plugins<br>from folium.plugins import HeatMapWithTime</pre><pre>import pandas as pd<br>column_names =[&#39;Mumbo-jumbo&#39;,&#39;County Name&#39;,&#39;Municipality Name&#39;,&#39;Crash Date&#39;,&#39;Crash Day Of Week&#39;,&#39;Crash Time&#39;,&#39;Police Dept Code&#39;,&#39;Police Department&#39;,&#39;Police Station&#39;,&#39;Total Killed&#39;,&#39;Total Injured&#39;,<br> &#39;Pedestrians Killed&#39;,&#39;Pedestrians Injured&#39;,&#39;Severity&#39;,&#39;Intersection&#39;,&#39;Alcohol Involved&#39;,&#39;HazMat Involved&#39;,&#39;Crash Type Code&#39;,&#39;Total Vehicles Involved&#39;,&#39;Crash Location&#39;,&#39;Location Direction&#39;,<br> &#39;Route&#39;,&#39;Route Suffix&#39;,&#39;SRI (Std Rte Identifier)&#39;,&#39;MilePost&#39;,&#39;Road System&#39;,&#39;Road Character&#39;,&#39;Road Horizontal Alignment&#39;,&#39;Road Grade&#39;,&#39;Road Surface Type&#39;,&#39;Surface Condition&#39;,&#39;Light Condition&#39;,<br> &#39;Environmental Condition&#39;,&#39;Road Divided By&#39;,&#39;Temporary Traffic Control Zone&#39;,&#39;Distance To Cross Street&#39;,&#39;Unit Of Measurement&#39;,&#39;Directn From Cross Street&#39;,&#39;Cross Street Name&#39;,<br> &#39;Is Ramp&#39;,&#39;Ramp To/From Route Name&#39;,&#39;Ramp To/From Route Direction&#39;,&#39;Posted Speed&#39;,&#39;Posted Speed Cross Street&#39;,&#39;First Harmful Event&#39;,&#39;Latitude&#39;,&#39;Longitude&#39;,<br> &#39;Cell Phone In Use Flag&#39;,&#39;Other Property Damage&#39;,&#39;Reporting Badge No&#39;]<br>#read the file and load into a dataframe<br>df1 = pd.read_csv(&#39;/content/drive/My Drive/Colab/NewJersey2017Accidents.txt&#39;, header=None)<br></pre><p>The first step (defining the dataset, and loading the content) is now done.</p><p>Now, the real work begins. Let’s see how much of the content is missing Latitude and Longitude values that are required to make the map work.</p><p>We will keep the records with good values in the first dataframe df1 and take the records with no Lat, Long values into a different dataset df2,</p><p>For this I will attempt to get the town names so that I can at least identify, on a different map, accident rates in those towns without specific street locations.</p><p>The code below will achieve this.</p><pre>#convert &#39;Crash Date&#39; field to python pandas readable month/ day/ year format <br>df1[&#39;Crash Date&#39;] = pd.to_datetime(df1[&#39;Crash Date&#39;], format = &#39;%m/%d/%Y&#39;)</pre><pre>#convert Latitude, Longitude columns from string to numeric<br>cols_to_convert = [&#39;Latitude&#39;, &#39;Longitude&#39;]<br>for col in cols_to_convert:<br> df1[col] = pd.to_numeric(df1[col], errors=&#39;coerce&#39;)</pre><pre>#Longitude values in the original data didn&#39;t have the negative (-) #sign - this code below fixes that by replacing all Lat values with #Lat * -1. Without this, the map displays a totally different part #of the world!<br><br>df1[&#39;Longitude&#39;]=df1[&#39;Longitude&#39;]* -1</pre><pre>#put all records with no data(NaN) for Lat and Long in separate #dataframe (df2)<br>df2 = df1.loc[df1.Latitude.isnull()]<br>#df2 = df1.loc[df1.Latitude.isnull()] &amp; df1.loc[df1.Longitude.isnull()]<br>df2.shape<br>#df2.head()</pre><pre>#drop records with NaN in Lat and Long from df1 (they are saved #above in df2)<br>df1 = df1.dropna(subset=[&#39;Latitude&#39;,&#39;Longitude&#39;])<br>df1.shape<br>print(df1.dtypes)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/516/1*bc_eu6UsjGqB1AGD05JC4Q.jpeg" /><figcaption>output of df1.dtypes shows each column type in dataframe</figcaption></figure><pre>#run some queries on dataframe 1 (with Lat, Long available)<br>#list accidents where one or more person killed — very serious ones<br>#not showing the output here, too long<br>print(df1.loc[(df1[&#39;Total Killed&#39;] &gt;= 1.0), [&#39;Municipality Name&#39;,&#39;Latitude&#39;,&#39;Longitude&#39;, &#39;Total Killed&#39;]])</pre><pre>#show accidents involving cell phone in use<br>print(df1.loc[(df1[&#39;Cell Phone In Use Flag&#39;] == &#39;Y&#39;),[&#39;Posted Speed&#39;,&#39;Police Station&#39;,&#39;Latitude&#39;,&#39;Longitude&#39;]])</pre><pre>#show crashes on Fridays<br>print(df1.loc[(df1[&#39;Crash Day Of Week&#39;] == &#39;FR&#39;),[&#39;Municipality Name&#39;,&#39;Posted Speed&#39;,&#39;Police Station&#39;,&#39;Latitude&#39;,&#39;Longitude&#39;]])</pre><pre>#show crashes for specific town and speed limit<br>print(df1.loc[(df1[&#39;Municipality Name&#39;] == &#39;WATCHUNG BORO&#39;), [&#39;Municipality Name&#39;,&#39;Posted Speed&#39;,&#39;Police Station&#39;,&#39;Latitude&#39;,&#39;Longitude&#39;]])</pre><h4><strong>Create some Heat Maps</strong></h4><p>Let’s get the location overlaid on a heat map. We can also make a heat map to show changes over time.</p><pre>#define a base map generator function<br>#-note - if folium doesn&#39;t work properly(it didn&#39;t, at first, for me #:) - in Google Colab - I uninstalled Folium, re-started kernel and #re-installed Folium<br>#I also saved to file as pressing run didn&#39;t output results<br></pre><pre>def generateBaseMap(default_location=[40.5397293,-74.6273494], default_zoom_start=12):<br> base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start)<br> return base_map</pre><pre>base_map = generateBaseMap()<br>base_map</pre><pre>#apply the heat map to the base map from above, and save &#39;m&#39;(output) # to a file. As explained at the top of the code notes, Run didn&#39;t #work for me. I opened saved file in browser to see output</pre><pre>m = HeatMap(data=df_map[[&#39;Latitude&#39;, &#39;Longitude&#39;, &#39;count&#39;]].groupby([&#39;Latitude&#39;,&#39;Longitude&#39;]).sum().reset_index().values.tolist(), radius=7, max_zoom=10).add_to(base_map)<br>m.save(&#39;/content/drive/My Drive/Colab/heatmap.html&#39;)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WuQ7IHqDWdSYgBIxXBm-Ww.jpeg" /><figcaption>Heatmap of traffic accidents for 2017 for all NJ, compressed view. A few have wrong coordinates (some are in the ocean, some are not in NJ), as you can see :) — real world data problem.</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RO6O22IfXDqwjubpLjXz2Q.jpeg" /><figcaption>Heat map, expanded, for 2017 traffic accidents.</figcaption></figure><p>That’s good — now let’s see a heat map over time.</p><pre>from folium.plugins import HeatMap<br>#first, copy all data [all 2017 county accidents] to our map #dataframe<br>df_map = df1.copy()</pre><pre>#set count field to 1 initially. Then, group by Lat, Long and count #how many are in each set of coordinates to create base map data</pre><pre>df_map[&#39;count&#39;]=1<br>df_map[[&#39;Latitude&#39;, &#39;Longitude&#39;, &#39;count&#39;]].groupby([&#39;Latitude&#39;, &#39;Longitude&#39;]).sum().sort_values(&#39;count&#39;, ascending=False).head(10)</pre><pre>base_map = generateBaseMap()<br>base_map<br>m = HeatMap(data=df_map[[&#39;Latitude&#39;, &#39;Longitude&#39;, &#39;count&#39;]].groupby([&#39;Latitude&#39;,&#39;Longitude&#39;]).sum().reset_index().values.tolist(), radius=7, max_zoom=10).add_to(base_map)<br>m.save(&#39;/content/drive/My Drive/Colab/heatmap_with_time-1.html&#39;)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/1*xXhsgvLIwvyehERuFKbaUg.gif" /><figcaption>Heat map with time — edited and shown in GIF. Basically shows concentration of accidents by location and day for 2017. Notice the controls, expanded below. Populated areas (Northern NJ, close to NYC, and Southern NJ, close to Philadelphia) and main transit corridors have higher accident rates, as expected.</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/642/1*pX3wp67oZjb0Q0ufu4_wZg.png" /><figcaption>Controls on the output file (rendered in browser) — control speed and play buttons. The ‘83’ is the day in this example.</figcaption></figure><h3><strong>Part 2 — Create Heat Maps of the 2nd dataset</strong></h3><p>Earlier, we split the dataset and created a data set df2 for those records without specific Latitude and Longitude coordinates.</p><p>The reasons for this could be many. Perhaps the data was contaminated at the time of capture, or the police officers were too busy with first responder duties to input precise information.</p><p>Whatever the reason, let’s get location data for the towns. This turned out to be more complicated than I had imagined. It could simply be that I didn’t think of an optimal way. This is the way I did it.</p><p>In real work situations, many a time you will have to go for the ‘most viable solution’, which means the best that is possible given the time, environmental constraints and incomplete data.</p><pre>#create a list of unique town names from df2 for use later to make a #call to function to get Lat, Long - easy to read each value from a #list<br>town_names=[]<br>df2.dropna(subset=[&#39;Municipality Name&#39;])<br>town_names = df2[&#39;Municipality Name&#39;].unique()<br>print(town_names)</pre><p>This is what we do in the next few steps. Take the list of unique town names that we just created. Then use a function to make an API call to maps.google to get the Latitude and Longitude coordinates.</p><p>Take the dataframe with town accident rates aggregated by town (grouped) and merge that with the list that has Lat and Long coordinates created in the step above.</p><p>Then, call the plot function to create a heat map like we did before for the first dataset.</p><pre>#call a previously created function (listed in the gist - link is #below this code box and output), then store google geo #coordinates #in a csv file.</pre><pre>#Ensure that you have API token:click link to find out how:<br># <a href="https://www.wpgmaps.com/documentation/creating-a-google-maps-api-key/">Google maps API</a> token<br>Lat_Long=[]<br>API_KEY = &#39;YOUR API KEY HERE&#39;<br>for address in town_names:<br> geocode_result = get_google_results(address, API_KEY, return_full_response=RETURN_FULL_RESULTS)<br> Lat_Long.append(geocode_result)</pre><pre>#now, convert the list with our geo coordinates into a csv file that #will be called by another program to overlay on a map.<br>pd.DataFrame(Lat_Long).to_csv(&#39;../Colab/town_with_Lat_Long_output.csv&#39;, encoding=&#39;utf8&#39;)</pre><pre>#read the csv file that has the latitude and longitude for the #records in df2, which originally did NOT have lat and long<br>df6 = pd.read_csv(&#39;/content/drive/My Drive/Colab/town_with_Lat_Long_output.csv&#39;)<br>df6.shape</pre><pre>#merge the two datasets - one has town names and geo coordinates, #the other has town names and aggregate accident info</pre><pre>df7 = pd.read_csv(&#39;/content/drive/My Drive/Colab/df5_output.csv&#39;)<br><br>dfinal = df6.merge(df7, on=&quot;Municipality Name&quot;, how = &#39;inner&#39;)</pre><pre>#now we draw the heat map for the 2nd dataset finally!</pre><pre>from folium.plugins import HeatMap<br>def generateBaseMap(default_location=[40.5397293,-74.6273494], default_zoom_start=12):<br> base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start)<br> return base_map</pre><pre>base_map = generateBaseMap()<br>base_map<br>m = HeatMap(data=dfinal[[&#39;latitude&#39;, &#39;longitude&#39;, &#39;count&#39;]].groupby([&#39;latitude&#39;,&#39;longitude&#39;]).sum().reset_index().values.tolist(), radius=7, max_zoom=10).add_to(base_map)<br>m.save(&#39;/content/drive/My Drive/Colab/heatmap_town_total_accidents_2017.html&#39;)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/789/1*mxvbSnBdZ8HPHC0k1PS67w.jpeg" /><figcaption>Heat map for the 2nd dataset (towns). Similar to the other map, Northern and Southern suburbs with higher populations and proximity to large cities have higher accident rates.</figcaption></figure><p>The gist for the code is <a href="https://gist.github.com/HariSan1/0245dca9ba3b32caf9b59ff81a4bd9b5">here</a>.</p><p>Thank you for reading all the way through. If you are a novice, each data science project is an adventure — hang in there. Unexpected (and expected) issues will arise — but so will your ingenuity, talent and application of other coders’ experiences, to get to the solutions you seek.</p><p>Please give me a clap if you liked the article!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e5a36775ee11" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/real-world-data-science-project-traffic-accident-analysis-e5a36775ee11">Real world data science project: traffic accident analysis</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
How to build a multilingual site using CloudCannon CMS for Jekyll
]]>
      </title>
      <link>
https://medium.freecodecamp.org/cloudcannon-cms-for-jekyll-building-a-multilingual-site-23435f75b82a?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/23435f75b82a</guid>
      <category>
        <![CDATA[ jekyll ]]>
      </category>
      <category>
        <![CDATA[ web-development ]]>
      </category>
      <category>
        <![CDATA[ programming ]]>
      </category>
      <category>
        <![CDATA[ cms ]]>
      </category>
      <category>
        <![CDATA[ tech ]]>
      </category>
      <dc:creator>
        <![CDATA[ Jean-Sébastien Tremblay ]]>
      </dc:creator>
      <pubDate>Mon, 21 Jan 2019 20:12:02 GMT</pubDate>
      <atom:updated>2019-02-05T17:36:31.421Z</atom:updated>
      <content:encoded>
        <![CDATA[
<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*SDFA4sS4_uJDTR8D0r8_OA.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/photos/E9aetBe2w40?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Sam Schooler</a> on <a href="https://unsplash.com/sear
]]>
        <![CDATA[ ch/photos/cloud?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>DEV FRIEND: “Static site generators are cool, but I couldn’t hook my next client up with, say, Jekyll.”</p><p>ME: “Why is that?”</p><p>DEV FRIEND: “Well, I’d need a Jekyll multilingual site with e-commerce, plus some type of simple CMS for Jekyll so my client wouldn’t touch any code. Last I checked all that was less of a hassle with a good ol’ CMS.”</p><p>ME: “It’s 11 PM, and I’ve got a beer to finish, but let me get back to you on that.”</p><p>The following day, I sat down with our content team and told them about my friend. We decided to come up with a tutorial to ~~prove him wrong~~ help him out.</p><p>2–3 years ago, modern static sites were regaining popularity, but suffering heavy backlashes:</p><blockquote><em>No backend! No dynamic functions! No complex data handling! No CMS!</em></blockquote><p>With <a href="https://snipcart.com/blog/jamstack">the rise of the JAMstack</a>, however, things have changed.</p><p>Today, I’m going to show how to integrate multiple languages into a Jekyll site and strap an easy-to-use CMS on top of it — CloudCannon.</p><p>We’ll also be using one of CloudCannon’s nifty Jekyll templates with built-in Snipcart e-commerce.</p><p>First, a bit of context.</p><h3>CMS for Jekyll: CloudCannon &amp; alternatives</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/573/0*Uw9wWMERdLnNuFjr.png" /></figure><p>GitHub co-founder Tom Preston-Werner created Jekyll. Jekyll has positioned itself as <em>the</em> static site generator in the last years. Written in Ruby, it allows developers to quickly transform plain text into full-blown sites &amp; blogs. Its go-to tools:</p><ul><li>Markdown writing</li><li>Liquid templating</li><li>Front matter formatting</li><li>HTML/CSS styling</li></ul><p><em>To get more hands-on with Jekyll, read </em><a href="https://snipcart.com/blog/static-site-e-commerce-part-2-integrating-snipcart-with-jekyll"><em>this popular post of ours</em></a><em>.</em></p><h3>Is managing content on Jekyll sites easy?</h3><p>For us developers? Yeah. With Jekyll, we ditch databases and store content in any Git repo — making for faster, secure sites. Now, most of us know their way around Git. We find no challenge in, say, blogging in markdown files and pushing to GitHub. Quite the opposite.</p><p>But non-technical folks? Yikes.</p><p>Mastering a UI like WordPress’ is often a challenge for green content editors. So you can bet they’ll hate your guts if you force them into a Git-centric workflow. It’s no surprise that the lack of CMS for Jekyll has been a recurring complaint from developers building sites for non-technical clients.</p><p>Good news is these complaints are slowly fading. Why?</p><p>Because an ecosystem of content management systems for static sites is slowly but surely emerging.</p><h3>Why use CloudCannon as a CMS for Jekyll?</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*BNrcnA8BR6FG9Kdo.png" /></figure><p>If you want to see what kind of street cred’ CloudCannon has, take a look at what Ashi Sheth from Netflix has to say:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/964/0*x8qFq-UaagauuzCN.png" /></figure><p>Clearly, it can’t be that bad, right? Bragging aside, we (Snipcart) go way back with CloudCannon. However, in the spirit of transparency, I’d like to list a few valuable Jekyll admin solutions.</p><h4>Jekyll CMS alternatives</h4><ul><li><a href="https://www.siteleaf.com/"><strong>Siteleaf</strong></a> (<a href="https://www.siteleaf.com/blog/jamstack-ecommerce/">see integration w/ Snipcart</a>)</li></ul><p>→ Pricing:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*csFKhgrRIViJ_8y-.png" /></figure><p>→ Supports: roles &amp; permissions, content preview, Markdown or WYSIWYG editor, collections, advanced metadata, custom permalinks, GitHub integration.</p><p>→ Hosting: Amazon S3, GitHub Pages, Rackspace, FTP.</p><ul><li><a href="https://forestry.io/"><strong>Forestry</strong></a></li></ul><p>→ Pricing:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*afmwJsVzdw9aUspj.png" /></figure><p>→ Supports: roles &amp; permissions, Git integration, mobile management, content preview.</p><p>→ Hosting: Amazon S3, GitHub Pages, Fastly, FTP, etc.</p><ul><li><a href="https://www.datocms.com/"><strong>DatoCMS</strong></a></li></ul><p>→ Pricing:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*bFef7BOenUz6np_G.png" /></figure><p>→ Supports: roles &amp; permissions, Git integration, collections, advanced metadata.</p><p>→ Hosting: Netlify, Amazon S3, GitHub Pages, FTP, etc.</p><ul><li><a href="https://www.netlifycms.org/"><strong>Netlify CMS</strong></a> (<a href="https://snipcart.com/blog/netlify-cms-react-git-workflow">read our review</a>)</li></ul><p>→ Pricing: FREE — open source</p><p>→ Supports: roles &amp; permissions, GitHub integration, edition workflow, extendable UI, content preview, flexible content types.</p><p>→ Hosting: Easy with Netlify CDN, but host-agnostic.</p><h4>So why CloudCannon CMS?</h4><p>Like others above, CloudCannon leverages Git to synchronize website collaboration between non-technical users &amp; developers.</p><p>Content editors use the clean graphical interface; developers stay in their chosen repo.</p><p><strong>1st scenario</strong>: <em>Editor edits content in CloudCannon UI → CloudCannon saves content in GitHub → build</em></p><p><strong>2nd scenario</strong>: <em>Developer pushes to GitHub → CloudCannon receives webhook → synchronizes data → build</em></p><p>Marketers get more autonomy; developers save time.</p><p>Key sections can be easily edited in-app, and so can metadata with <a href="https://docs.cloudcannon.com/editing/front-matter/">front matter</a>. The CMS will automatically choose the right field type in the UI by binding to the name of your front matter tags: color pickers, date pickers, collections dropdowns, etc.</p><p>CloudCannon also pushes the “user friendliness” of content management further with <strong>inline editing</strong>. The admin can display a visual editor of the Jekyll site where editors simply click on fields they want to edit. These fields have to be pre-determined by developers (<a href="https://docs.cloudcannon.com/editing/editable-regions/#markdown-content-elements">docs here</a>).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*X9HxMBw0pYkyMBwt.jpg" /></figure><p>Its pricing scales super well for freelancers and teams too:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*TRte4_vO7MxXBwY2.png" /></figure><h3>Multilingual Jekyll sites: context</h3><p>At its core, Jekyll is a “hackable” generator. It’s one of the reasons devs love it. If your use case isn’t supported out of the box, you just use or build plugins.</p><p>Our “advanced” use case here? E-commerce <strong>multilingual support</strong>.</p><p>In our Québec hometown, bilingualism [FR/ENG] is often a must for merchants.</p><p>Traditional platforms like WordPress typically offer easy “i18n” plugins &amp; features to support multiple languages. Static generators like Jekyll require a bit more work. A small trade-off for their benefits: performance, security, simplicity, scalability.</p><p>There are a few options available to build a multilingual website with Jekyll. Some use gem plugins, others are hand-made using all the flexibility of Jekyll. The ones I tried (like <a href="https://github.com/Anthony-Gaudino/jekyll-multiple-languages-plugin">the Jekyll multiple languages plugins</a>) were interesting but incompatible with most recent Jekyll versions.</p><p>So for this tutorial, I went with a custom approach. Why? First, so you can use an up-to-date Jekyll and update it later without dealing with gems and Ruby code. Second, because GitHub pages (which we’ll use later) won’t execute custom Jekyll plugins.</p><p>The following demo will show you how to use CloudCannon’s Jekyll e-commerce template and:</p><ul><li>Structure &amp; prepare site/templates for multiple languages</li><li>Add a language selector to Jekyll template</li><li>Set up translation fallback for content that hasn’t been translated</li><li>Allow permalinks to be 100% translated</li></ul><h3>Building a Jekyll multilingual site with CloudCannon CMS</h3><p>When launching a new project on CloudCannon, you can 1) use their templates, 2) import static files, or 3) sync an existing repo from one of their supported storage (GitHub, Bitbucket, Dropbox).</p><p><a href="https://github.com/CloudCannon/fur-jekyll-template">One of their base templates</a> comes with Snipcart built-in. We’ll use it for this multilingual demo, and GitHub for storage.</p><h4>Prerequisites</h4><ul><li>Git, Ruby, and bundler installed</li><li>A basic understanding of Jekyll</li><li>A <a href="https://app.snipcart.com/">Snipcart account</a> for e-commerce to work (free in test mode)</li></ul><h3>1. Installing and tweaking the Jekyll template</h3><p>First, let’s clone the repo. Later, we’ll deploy to CloudCannon, allowing editors to manage content/products.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/d1ba997cf20de278a30ab8ac0c9564c6/href">https://medium.com/media/d1ba997cf20de278a30ab8ac0c9564c6/href</a></iframe><p>At the project’s root, a Gemfile defines Jekyll&#39;s version, which we&#39;ll install using bundler. This allows us to make sure we&#39;re using the proper Jekyll version:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2fcfc680f23eb02cdfb59e600b54f1da/href">https://medium.com/media/2fcfc680f23eb02cdfb59e600b54f1da/href</a></iframe><p>Now go to http://localhost:4000/. Local website running, yay!</p><p>The first thing you should have a look at is _config.yml. That&#39;s where we&#39;ll change the main information about the site. Let&#39;s start by choosing a great title and set your <a href="https://app.snipcart.com/dashboard/account/credentials">Snipcart API Key</a>.</p><p>To update _config.yml, you&#39;ll have to restart the bundler exec jekyll serve command. Most other changes should be picked up automatically by Jekyll. Other noteworthy stuff:</p><ul><li>_sass folder: site&#39;s styles in <a href="http://sass-lang.com/">SCSS</a></li><li>css, images &amp; js folders: static assets</li><li>_layout &amp; _includes folders: templates</li><li>_products, _categories &amp; _pages folders:</li><li>Actual content of your website in multiple subfolders per lang</li><li>A _defaults.md file defining default fields enabling content creation on CloudCannon</li></ul><h3>2. Organizing Jekyll content for multiple languages in CMS</h3><p>Organizing site content will define how we work with Liquid templates and how CloudCannon will handle editing. I went with subdirectories per lang since it fits with <a href="https://jekyllrb.com/docs/configuration/#front-matter-defaults">Jekyll’s configuration to set default values</a>.</p><p>A few things in _config.yml for our translation:</p><ul><li>langs variable: list of supported languages</li><li>t.default_lang variable: default language</li><li>used to know which language’s at the root of the site</li><li>our products’ data are fetched from the default language version of the product</li><li>t.{en/fr/...} values:</li><li>localization strings where we’ll put translations for our templates</li><li>in any Liquid template, we’ll be able to use {{site.t[page.lang].my_translated_string}}</li><li>defaults values: filter our content by file path to set default values</li></ul><p>Let’s have a closer look at the defaults values&#39; format:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/8f11c4c01e6b32dc12f8eb37e59ae0b6/href">https://medium.com/media/8f11c4c01e6b32dc12f8eb37e59ae0b6/href</a></iframe><p>For each supported site lang, we’ll add one of these blocks to set the language on the subfolder and translate the permalink. That block above basically means:</p><p><strong>For any content file in the </strong><strong>_products/fr folder, set the lang to </strong><strong>fr and use </strong><strong>/fr/produits/:title as permalink.</strong></p><p>So we can translate the base of our URLs for each lang. Because the :title parameter is replaced by the slug variable from our content documents, we can have fully translated URLs! :)</p><h3>3. Allowing users to switch language on site</h3><p>An important component of a multilingual site is the ability to switch languages. We’ll need an easy-to-use language selector here.</p><p>That’s where some of the content organization decisions we made come in handy. To identify corresponding pages in different languages, we’ll use the file’s name. Say you have created a product in _products/en/burger.md, you&#39;d create its French equivalent in _products/fr/burger.md.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3db8fe5d2fa84048aae2913db929309f/href">https://medium.com/media/3db8fe5d2fa84048aae2913db929309f/href</a></iframe><p>The code might seem a bit complex, but unlike other approaches, it enforces a specific format for each page’s language URL. It’s what allows us to fully translate every URL.</p><h3>4. Listing all products — even those without translations</h3><p>Even with a good CMS and structure, managing many products &amp; languages can become hairy. It’s easy to forget a translation. Still, you wouldn’t want a product hidden from your customers should that mistake happens.</p><p>Or, for instance, if your costs increase and you need to update prices, you don’t want to have to pass every products’ languages to update prices.</p><p>To avoid all that, we’ll use price information from the product in your site’s default language.</p><p>Here’s how to list every product and fallback to the site’s default language:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3c71177d2846c198a49170ed1251ecc6/href">https://medium.com/media/3c71177d2846c198a49170ed1251ecc6/href</a></iframe><p>Two main parts to the code above:</p><ol><li>Getting every product’s filename for a category</li><li>Getting the actual product’s data from that filtered list</li></ol><p>We have to do that because Jekyll’s where_exp is very limited. We can only compare items property with another variable and not a transformed value.</p><p>And that’s it! That was the hardest stuff to get multilingual. A few ideas to make your site even more awesome:</p><ul><li>Add alternate links in your site’s head.</li><li>Add products ordering.</li><li>Add CloudCannon’s <a href="https://docs.cloudcannon.com/editing/editor-links/">editor links</a> to your products.</li></ul><h3>GitHub repo &amp; live demo</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*xBsuOQU-UQcP85bk.png" /></figure><p>Now go ahead, browse our demo site and sift through our open source code!</p><blockquote><a href="https://github.com/snipcart/demo-cloudcannon"><em>See GitHub code repo</em></a></blockquote><blockquote><a href="https://snipcart.github.io/demo-cloudcannon/"><em>See Jekyll multilingual e-commerce site</em></a></blockquote><h3>Closing thoughts</h3><p>The constraints I was up against, especially not using plugins, made the multilingual task more complex. Jekyll can be sometimes silent about what’s happening. For instance, at some point, I had two pages with the same permalink and the changes I was making would not show up.</p><p>CMS-wise, working with CloudCannon was super fun &amp; straightforward!</p><p>This tutorial took me definitely more time than I expected (~1 day). To be fair, it was also my first one! I hope I explained enough stuff so that you don’t get stuck on all the details I had to account for in building the demo. ;)</p><p>Happy coding!</p><p><em>I originally published this on the </em><a href="https://snipcart.com/blog/jamstack"><em>Snipcart blog</em></a><em> and shared it in </em><a href="https://us5.list-manage.com/subscribe?u=c019ca88eb8179b7ffc41b12c&amp;id=3e16e05ea2"><em>our newsletter</em></a><em>.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=23435f75b82a" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/cloudcannon-cms-for-jekyll-building-a-multilingual-site-23435f75b82a">How to build a multilingual site using CloudCannon CMS for Jekyll</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
    <item>
      <title>
        <![CDATA[
How to use Alexa Presentation Language in your skill
]]>
      </title>
      <link>
https://medium.freecodecamp.org/how-to-use-alexa-presentation-language-in-your-skill-3c49961825c5?source=rss----336d898217ee---4
      </link>
      <guid isPermaLink="false">https://medium.com/p/3c49961825c5</guid>
      <category>
        <![CDATA[ tech ]]>
      </category>
      <category>
        <![CDATA[ alexa-skills ]]>
      </category>
      <category>
        <![CDATA[ ux ]]>
      </category>
      <category>
        <![CDATA[ software-development ]]>
      </category>
      <category>
        <![CDATA[ programming ]]>
      </category>
      <dc:creator>
        <![CDATA[ Garrett Vargas ]]>
      </dc:creator>
      <pubDate>Tue, 05 Feb 2019 17:08:32 GMT</pubDate>
      <atom:updated>2019-02-05T17:08:32.738Z</atom:updated>
      <content:encoded>
        <![CDATA[
<p>Amazon recently released the Alexa Presentation Language (APL). APL provides a richer display for multimodal skills. It is based on modern frameworks that separate display elements from data sources. It gives you the flexibility to include many visual elements such as graphics, images, and slideshows and lets you tailor the display for different devices.</p><p>In this article, I’m going to walk through how I updated one of my skills to use APL. You can also use these tips and techniques if you are creating a new skill.</p><p>Most of my skills feature multimodal support using the <a href="https://developer.amazon.com/docs/custom-skills/display-interface-reference.html">Display Interface</a>. I decided to learn APL by updating one of my existing skills. I focused on my <a href="https://www.amazon.com/Garrett-Vargas-Video-Poker/dp/B07465B5ZK">Video Poker</a> skill because I wasn’t happy with the existing customer experience.</p><p>Video Poker presents users with a 5-card poker hand, with an ability to hold and discard cards before drawing to complete a hand. Users can do this by voice command (“keep the first card” or “keep the pair of jacks”), or by touching cards on a visual display. <strong>ListTemplate2 </strong>was the best way to do this with the Display Interface. However, this came with the limitation of only allowing three cards on the screen at a time and putting numbers beneath each card in the list.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*XOWdYtWXtSuk8fMCXVvf5A.png" /><figcaption>Video Poker using ListTemplate2 Display Directive</figcaption></figure><p>Using APL, I modified a ListTemplate2 layout to shrink the size of list items, reduce the spacing between them, and fit a full five card hand on the screen. I was able to remove the numbers from items in the list and put text indicating which held cards in a bold, red font. I was able to optimize the layout for different screen dimensions, such as smaller displays like the Echo Spot.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Yhxg6EjPOGffEe0-01U-RQ.png" /><figcaption>Video Poker using APL template modified from ListTemplate2</figcaption></figure><h4>APL Authoring Tool</h4><p>The way I did this was through the <a href="https://developer.amazon.com/alexa/console/ask/displays">APL Authoring Tool</a>. This handy tool provides a list of different visual designs you can use as a baseline to create compelling visuals for your skill. It also allows you to save and upload layouts, so you can extract them to your skill code, or upload them if you make offline updates. For this use case, I started with the <strong>Image Forward List Sample</strong>, which is based on ListTemplate2.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*6TzdicFpF3S5ces997meAg.png" /><figcaption>Selecting a visual design from the APL Authoring Tool</figcaption></figure><p>Once you select this visual design in the tool, you’ll see a generic example of a list with cheese samples. You’ll see the APL document at the bottom of the screen separated into two tabs:</p><ul><li>“Image Forward List Sample” which provides the layout</li><li>“Data JSON” tab which provides a view of the document data.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*oX_gNoEwHiwMJT4IlqDumA.png" /><figcaption>Editing your APL Document in the Authoring Tool</figcaption></figure><p>Take a moment to look through the JSON on both the Image Forward List Sample tab (the layout code) and the Data JSON tab (the content code). You’ll notice in the layout that there are several references to values enclosed in ${} such as ${payload.listTemplate2ListData.listPage.listItems.length}. If you look in the content file, you’ll see that this is a path to a value within the content. This is how APL binds data to the presentation layer and lets you make changes.</p><h4>Updating Data Sources</h4><p>As a first step, I wanted to update the data so it would show card images and text relevant to my skill. That way, as I started to update the layout itself, I would be able to see how it would look with my actual images. The Authoring Tool shows your rendered screen images in real time, making it convenient to use as you attempt to perfect your layout. To update the data, I took the following steps:</p><ul><li>Click on the Data JSON tab</li><li>In the listTemplate2Metadata, change the title and logo elements to something relevant to Video Poker</li><li>In this same element, change the url in the backgroundImages.sources fields to point to the background image I wanted to use</li><li>In listTemplate2ListData.listPage, I updated each of the items in the listItems array. Specifically, I updated this array to have 5 items (my cards), with listItemIdentifier and token set to “card.x” (where x ranged from 0–4). I removed the secondaryText since I only wanted one row of text (which would either be blank or say “HELD”). I updated the image.sources to point to URLs containing my card images. For now, I just selected some card images at random — my skill’s code will update the data during gameplay with the actual user’s hand</li><li>Update the hint text to use a transformation. Rather than hard-coding the hint string with the Alexa keyword, you can use a transform to change a hint into one that uses the wake word associated with the device, in case the user has changed it. You do this by removing the hintText from listTemplate2ListData and adding the following into your lastTemplate2Metadata:</li></ul><pre>&quot;properties&quot;: {<br> &quot;hintText&quot;: &quot;select number 1&quot;<br>},<br>&quot;transformers&quot;: [<br> {<br> &quot;inputPath&quot;: &quot;hintText&quot;,<br> &quot;transformer&quot;: &quot;textToHint&quot;<br> }<br>],</pre><p>Once I had made these to the data sources, my image looked like this — pretty similar to the skill as it exists with the ListTemplate2 display which makes sense since at this point I’m still using the layout based on ListTemplate2 and have only made content changes.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/616/1*AQR02VoOUIDFXHMEtupigQ.png" /><figcaption>Updated view with relevant Video Poker content</figcaption></figure><h4>Updating the Layout</h4><p>Now for the fun part — updating the layout to get five images on the screen at one time. For this part, I made updates to the layout on the “Image Forward List Sample” tab. To make these changes, I clicked on the slider that lets you switch between a visual view of nested APL components to a raw JSON view. I find viewing the full document JSON easier to consume than clicking on each component and editing the JSON within the component. But you can play with it and follow whichever approach seems most natural to you.</p><p>Before talking through the changes I made, I wanted to point out some of the elements of this layout template:</p><ul><li>There is a ListTemplate2 node in the JSON which provides two containers in an items node— one that applies to circular screens (like the Echo Spot) and the other for other screen types. In this blog, I’m going to focus on the non-Spot displays, but you should appreciate that you can also make changes specific to different screen layouts.</li><li>Looking at the second container that we’ll be changing, you‘ll see a set of items including an Image (the background image), an <strong>AlexaHeader </strong>(the title on the screen), a <strong>Sequence </strong>(which is the list of cards), and an <strong>AlexaFooter </strong>(the hint at the bottom of the screen)</li><li>You’ll see that the Sequence points to HorizontalListItem, which is another container in this JSON document. It contains items consisting of an Image and two Text elements (the primary text and the secondary text)</li></ul><p>With this context in mind, I made the following changes to this document:</p><ul><li>Within the HorizontalListItem, I changed the Image item dimensions — specifically I set height to 40vh and width to 17vw. This sets the height of each card to 40% of the viewport height, and the width to 17% of the viewport width.</li><li>I then updated midWidth to 100. This makes the width of each list item smaller and allows the five card images to appear on the screen</li><li>I changed paddingLeft and paddingRight to 6 to reduce the amount of space between elements</li><li>I added paddingTop and set it to 100 to add some separation between the header and the card images</li><li>I got rid of the secondary Text element since I don’t have two lines of text on my display</li><li>I changed the primary Text element so it doesn’t draw the ordinal. So text in this element changed from &lt;b&gt;${ordinal}.&lt;/b&gt;${data.textContent.priamryText.text} to &lt;b&gt;${data.textContent.primaryText.text}&lt;/b&gt;.</li><li>Within this same element, I wanted the text to be red and centered. I achieved this by adding a textAlign field with a value of “center,” and a color field with a value of “red.”</li><li>In order to get the hint text from the appropriate location (now part of the metadata rather than the list data), I needed to update the AlexaFooter element to get the hint from ${payload.listTemplate2Metadata.properties.hintText}</li></ul><p>Finally, I needed to make the cards in my list selectable, so I could respond when the user touches one of them on the screen. To do this, I needed to change the items that were associated with the Sequence element from a FullHorizontalListItem to a TouchWrapper which in turn contained a FullHorizontalListItem. In code, that means that I changed this:</p><pre>&quot;item&quot;: [<br> {<br> &quot;type&quot;: &quot;FullHorizontalListItem&quot;,<br> &quot;listLength&quot;: &quot;${payload.listTemplate2ListData.listPage.listItems.length}&quot;<br> }<br>]</pre><p>to this:</p><pre>&quot;item&quot;: [<br> {<br> &quot;type&quot;: &quot;TouchWrapper&quot;,<br> &quot;onPress&quot;: {<br> &quot;type&quot;: &quot;SendEvent&quot;,<br> &quot;arguments&quot;: [<br> &quot;${data.token}&quot;<br> ]<br> },<br> &quot;item&quot;: {<br> &quot;type&quot;: &quot;FullHorizontalListItem&quot;,<br> &quot;listLength&quot;: &quot;${payload.listTemplate2ListData.listPage.listItems.length}&quot;<br> }<br> }<br>]</pre><p>Note the onPress element in this item. Specifically, the list of arguments. You can specify an array of different arguments to send to your skill when an item is selected. Because my existing code was processing the token of the selected card, I decided to continue to do the same to minimize the amount of code I needed to change. But you could also pass in ${ordinal} which would tell you the index of the selected item without having to process the token.</p><h4>Updates to the Skill Code</h4><p>Once you’ve made changes within the Authoring Tool, you can select the Export Code button which will package up your layout and data files into one JSON file for you. I chose to use two different JSON files in my code, one called main which I used for the layout and another called datasources which I used for the data. I like keeping the separation of layout and content in my source code as a general best practice. It was surprising that Amazon’s Authoring Tool didn’t encourage this too.</p><p>Now that we’ve downloaded the document and content, we need to make code changes to incorporate it and update the data as the user plays with our skill. We can do this by manipulating data elements and then passing them back to the skill. I used Alexa’s response interceptor functionality (which I talk about in a <a href="https://medium.freecodecamp.org/how-to-improve-your-code-with-alexa-response-interceptors-2b3e73721fc">separate blog post</a>). I load the data source in from a JSON file, then update the cards and text within the structure before sending it off to Alexa. I do that with the following code:</p><pre>const main = require(&#39;./main.json&#39;);<br>const datasource = require(&#39;./datasource.json&#39;);</pre><pre>function drawTable(handlerInput) {<br> const event = handlerInput.requestEnvelope;<br> const attributes = handlerInput.attributesManager.getSessionAttributes();<br> const game = attributes[attributes.currentGame];<br><br> let i;<br> let cardText;<br> let url;</pre><pre> // Update the images<br> for (i = 0; i &lt; game.cards.length; i++) {<br> const card = game.cards[i];<br> url = GetCardURL(card);<br> cardText = (card.hold) ? &#39;HELD&#39; : &#39;&#39;;<br> datasource.listTemplate2ListData.listPage.listItems[i]<br> .textContent.primaryText.text = cardText;<br> datasource.listTemplate2ListData.listPage.listItems[i]<br> .image.sources[0].url = url;<br> datasource.listTemplate2ListData.listPage.listItems[i]<br> .image.sources[1].url = url;<br> }<br><br> // Give an appropriate hint<br> if (game.state === &#39;FIRSTDEAL&#39;) {<br> if (game.cards[0].hold) {<br> datasource.listTemplate2ListData.hintText = &#39;discard the first card&#39;;<br> } else {<br> datasource.listTemplate2ListData.hintText = &#39;hold the first card&#39;;<br> }<br> datasource.listTemplate2Metadata.title = &#39;Select cards to hold or say Deal&#39;;<br> } else {<br> datasource.listTemplate2ListData.hintText = &#39;deal&#39;; datasource.listTemplate2Metadata.title = &#39;Your last hand&#39;;<br> }<br> }<br><br> return handlerInput.responseBuilder<br> .addDirective({<br> type: &#39;Alexa.Presentation.APL.RenderDocument&#39;,<br> version: &#39;1.0&#39;,<br> document: main,<br> datasources: datasource,<br> });<br>}</pre><p>The second place I had to make a code change was to handle the user touching one of the items in my list. In my old code, I was parsing item tokens of the form “card.x” where x is the ordinal position of the card in the list. With a Display Interface, this meant looking for an ElementSelected request. In APL, your code will receive an APL.Presentation.APL.UserEvent, and you can process the request as follows to determine which card was selected:</p><pre>module.exports = {<br> canHandle(handlerInput) {<br> const request = handlerInput.requestEnvelope.request;<br><br> // Was this a touch item selected?<br> if (request.type === &#39;Alexa.Presentation.APL.UserEvent&#39;) {<br> return ((request.source.type === &#39;TouchWrapper&#39;)<br> &amp;&amp; (request.source.handler === &#39;Press&#39;));<br> }<br> return false;<br> },<br> handle(handlerInput) {<br> let index;<br> const event = handlerInput.requestEnvelope;<br><br> // Was this a touch item selected?<br> if (event.request.type === &#39;Alexa.Presentation.APL.UserEvent&#39;) {<br> const cards = event.request.arguments[0].split(&#39;.&#39;);<br> if (cards.length === 2) {<br> index = cards[1];<br> }<br><br> // Do something with the selected card...</pre><pre> }<br> },<br>};</pre><p>With these changes, I had a much cleaner looking Video Poker skill, which is sure to delight my customers more than the older format I was using. I’ve just started scratching the surface in terms of APL’s capabilities. But I can tell it will open up a new world of possibilities for voice-driven multimodal skills! Let me know in the comments about your own learnings with this new framework.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3c49961825c5" width="1" height="1"><hr><p><a href="https://medium.freecodecamp.org/how-to-use-alexa-presentation-language-in-your-skill-3c49961825c5">How to use Alexa Presentation Language in your skill</a> was originally published in <a href="https://medium.freecodecamp.org">freeCodeCamp.org</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>
]]>
      </content:encoded>
    </item>
  </channel>
</rss>